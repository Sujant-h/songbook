---
import '../../styles/global.css';
import songs from '../../data/data_cleaned.json';
import { promises as fs } from 'fs';
import { pwaInfo } from 'virtual:pwa-info';

export interface Props {
  title: string;
}

const { title } = Astro.props as Props;

// Generate dynamic paths for each song
export async function getStaticPaths() {
  return songs.map(song => ({ params: { id: song.id } }));
}

// Get song by ID from the URL parameters
const { id } = Astro.params;
const song = songs.find(song => song.id === id);
if (!song) {
  throw new Error('Song not found');
}

// Check if audio file exists
let audioExists = false;
const audioFilePath = `./public/audio/${song.id}.mp3`;
try {
  await fs.access(audioFilePath);
  audioExists = true;
} catch {}

// Function to format song text into paragraphs
function formatSongText(text) {
  // 1) Normalize line breaks
  let output = text
    .replace(/\r\n/g, '\n')
    .replace(/\r/g, '\n');

  // 2) Only transform parentheses if preceded by "\n\n"
  //    - Captures (group1) = "\n\n"
  //    - Captures (group2) = everything inside (...)
  //    - Replaces with the same "\n\n", followed by a span that keeps parentheses
  //      italicized and forced onto its own line (block) and left-aligned on mobile.
  output = output.replace(
    /(\n\n)\((.*?)\)/g,
    '$1<span class="italic text-right lg:text-left block">($2)</span>'
  );

  // 3) Split text into paragraphs on blank lines
  const paragraphs = output
    .trim()
    .split(/\n\s*\n/) // blank line => new paragraph
    .map(paragraph => {
      // 4) Replace any single newlines within paragraphs with <br>
      return `<p>${paragraph.replace(/\n/g, '<br>')}</p>`;
    });

  // 5) Join the paragraphs into one HTML string
  return paragraphs.join('');
}




---

<html lang="ta">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" href="/favicon.svg" type="image/svg+xml">
    <link rel="apple-touch-icon" href="/pwa-192x192.png">
    <link rel="mask-icon" href="/favicon.svg" color="#FFFFFF">
    <meta name="msapplication-TileColor" content="#FFFFFF">
    <meta name="theme-color" content="#ffffff">
    <title>{song.title}</title>
    <meta name="description" content={title}>
    <script src="/src/pwa.ts"></script>
    { pwaInfo && <Fragment set:html={pwaInfo.webManifest.linkTag} /> }

    <!-- Material Symbols “close” icon -->
    <link
      rel="stylesheet"
      href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200&icon_names=close"
    />
    <style>
      .material-symbols-outlined {
        font-variation-settings:
          'FILL' 0,
          'wght' 400,
          'GRAD' 0,
          'opsz' 24;
      }
    </style>

    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link
      href="https://fonts.googleapis.com/css2?family=Noto+Sans+Tamil:wght@100..900&display=swap"
      rel="stylesheet"
    >
  </head>
  <body class="bg-gray-50">
    <div class="container mx-auto px-4 py-8">

      <!-- Main Box: Song Content -->
      <div class="max-w-3xl mx-auto bg-white p-6 sm:p-8 rounded-lg shadow-lg relative">
        <!-- Gray round "X" in the top-right corner -->
        <button
          type="button"
          onclick="event.preventDefault(); (document.referrer ? window.history.back() : window.location.href = '/songbook');"
          class="
            group
            absolute top-0 right-0 
            m-2 w-10 h-10 flex items-center justify-center
            bg-gray-200 text-gray-700 hover:bg-gray-300
            rounded-full shadow
            focus:outline-none focus:ring-2 focus:ring-gray-400
            transform -translate-y-1/2 translate-x-1/2
          "
          title="Back to Songs"
        >
          <!-- The Material Symbols 'close' icon -->
          <span class="material-symbols-outlined text-xl transition-colors duration-200 group-hover:text-red-600">
            close
          </span>
        </button>

        <!-- Song Title -->
        <h1
          class="text-lg sm:text-xl lg:text-4xl font-semibold text-darkblue mb-6 
                 border-b-2 border-gray-200 pb-2 text-center sm:text-left font-tamil leading-snug"
        >
          {song.title}
        </h1>

        <!-- Song Text -->
        <div class="text-base sm:text-lg text-gray-700 font-tamil leading-relaxed ">
          <div class="song-text" set:html={formatSongText(song.text)}></div>
        </div>
      </div>

      <!-- Audio Player Box (if audio file exists) -->
      {audioExists && (
        <div class="max-w-3xl mx-auto mt-8 bg-white p-6 rounded-lg shadow-md">
          <h2 class="text-xl font-semibold text-gray-800 mb-4">Audio</h2>
          <audio
            controls
            preload="none"
            class="w-full focus:outline-none focus:ring-2 focus:ring-blue-500"
          >
            <source src={`${import.meta.env.BASE_URL}/audio/${song.id}.mp3`} type="audio/mpeg" />
            Your browser does not support the audio element.
          </audio>
        </div>
      )}
    </div>

    <!-- Client-Side Script to Highlight Search Query -->
    <script>
      // Utility to escape regex special characters
      const escapeRegExp = str => str.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
      const highlightElement = (el, query) => {
        const words = query.split(/\s+/).filter(Boolean);
        if (!words.length) return;
        const regex = new RegExp('(' + words.map(escapeRegExp).join('|') + ')', 'giu');
        el.innerHTML = el.innerHTML.replace(regex, '<span class="highlighted">$1</span>');
      };

      document.addEventListener('DOMContentLoaded', () => {
        const searchQuery = sessionStorage.getItem('searchQuery');
        if (searchQuery && searchQuery.trim() !== '') {
          const titleEl = document.querySelector('h1');
          const songTextEl = document.querySelector('.song-text');
          if (titleEl) highlightElement(titleEl, searchQuery);
          if (songTextEl) highlightElement(songTextEl, searchQuery);
        }
      });
    </script>
  </body>
</html>

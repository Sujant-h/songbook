---
import '../../styles/global.css';
import songs from '../../data/data_cleaned.json';
import { promises as fs } from 'fs';
import { pwaInfo } from 'virtual:pwa-info';

export interface Props {
  title: string;
}

const { title } = Astro.props as Props;

export async function getStaticPaths() {
  return songs.map(song => ({ params: { id: song.id } }));
}

const { id } = Astro.params;
const song = songs.find(song => song.id === id);
if (!song) {
  throw new Error('Song not found');
}

// For static rendering, check for a URL query parameter.
const urlLang = Astro.url.searchParams.get('lang');
const validLangs = ['ta', 'en', 'de'];
// Use the query parameter if valid, otherwise default to 'ta'
const staticLang = validLangs.includes(urlLang) ? urlLang : 'ta';

// Select localized content for static fallback.
const songTitle = song[`title_${staticLang}`] || song.title;
const songText = song[`text_${staticLang}`] || song.text;

let audioExists = false;
const audioFilePath = `./public/audio/${song.id}.mp3`;
try {
  await fs.access(audioFilePath);
  audioExists = true;
} catch {}
---

<html lang={staticLang}>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" href="/favicon.svg" type="image/svg+xml">
    <link rel="apple-touch-icon" href="/pwa-192x192.png">
    <link rel="mask-icon" href="/favicon.svg" color="#FFFFFF">
    <meta name="msapplication-TileColor" content="#FFFFFF">
    <meta name="theme-color" content="#ffffff">
    <title>{songTitle}</title>
    <meta name="description" content={title}>
    <script src="/src/pwa.ts"></script>
    { pwaInfo && <Fragment set:html={pwaInfo.webManifest.linkTag} /> }

    <!-- Material Symbols and Fonts -->
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200&icon_names=close">
    <style>
      .material-symbols-outlined {
        font-variation-settings: 'FILL' 0, 'wght' 400, 'GRAD' 0, 'opsz' 24;
      }
    </style>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Noto+Sans+Tamil:wght@100..900&display=swap" rel="stylesheet">
  </head>

  <body class="bg-gray-50">
    <!-- Make the container relative so absolute children are positioned within it -->
    <div class="container mx-auto px-4 py-8 relative">
      <!-- Language Dropdown positioned on the top right corner -->
      <div class="language-toggle absolute top-4 right-4">
        <select id="language-select" class="px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-babyblue">
          <option value="none">Tamil</option>
          <option value="en">English</option>
          <option value="de">German</option>
        </select>
      </div>
  
      <!-- Song Container -->
      <div id="song-container" class="max-w-3xl mx-auto bg-white p-6 sm:p-8 rounded-lg shadow-lg relative mt-16">
        <button type="button" id="back-button" class="group absolute top-0 right-0 m-2 w-10 h-10 flex items-center justify-center bg-gray-200 text-gray-700 hover:bg-gray-300 rounded-full shadow focus:outline-none focus:ring-2 focus:ring-gray-400 transform -translate-y-1/2 translate-x-1/2" title="Back to Songs">
          <span class="material-symbols-outlined text-xl transition-colors duration-200 group-hover:text-red-600">close</span>
        </button>
        <h1 id="song-title" class="text-lg sm:text-xl lg:text-4xl font-semibold text-darkblue mb-6 border-b-2 border-gray-200 pb-2 text-center sm:text-left font-tamil leading-snug"></h1>
        <div id="song-text" class="text-base sm:text-lg text-gray-700 font-tamil leading-relaxed"></div>
      </div>
  
      <!-- Audio Container -->
      <div id="audio-container" class="max-w-3xl mx-auto mt-8 bg-white p-6 rounded-lg shadow-md" style="display: none;">
        <h2 class="text-xl font-semibold text-gray-800 mb-4">Audio</h2>
        <audio id="audio-player" controls preload="none" class="w-full focus:outline-none focus:ring-2 focus:ring-blue-500">
          <source id="audio-source" src="" type="audio/mpeg" />
          Your browser does not support the audio element.
        </audio>
      </div>
    </div>
    <!-- ... your existing script block ... -->
  </body>
  

    <script>
      // --- Helper Function ---
      // Formats song text into paragraphs with line breaks and transforms parentheses if preceded by a double newline.
      function formatSongText(text) {
        let output = text.replace(/\r\n/g, '\n').replace(/\r/g, '\n');
        output = output.replace(/(\n\n)\((.*?)\)/g, '$1<span class="italic text-right lg:text-left block">($2)</span>');
        const paragraphs = output.trim().split(/\n\s*\n/).map(paragraph => `<p>${paragraph.replace(/\n/g, '<br>')}</p>`);
        return paragraphs.join('');
      }

      // --- Utility Functions ---
      // Extracts the song ID from the URL (assumes URL like /songs/1)
      function getSongIdFromPath() {
        const parts = window.location.pathname.split('/');
        return parts[parts.length - 1] || parts[parts.length - 2];
      }

      // Loads song data from the JSON file.
      async function loadSongData() {
        const response = await fetch("/src/data/data_cleaned.json");
        return response.json();
      }

      // --- Main Initialization ---
      async function init() {
        const songId = getSongIdFromPath();
        const songs = await loadSongData();
        const song = songs.find(s => s.id === songId);
        if (!song) {
          document.getElementById('song-container').innerHTML = '<p>Song not found.</p>';
          return;
        }

        const languageSelect = document.getElementById('language-select');
        const titleEl = document.getElementById('song-title');
        const songTextEl = document.getElementById('song-text');
        const audioContainer = document.getElementById('audio-container');
        const audioSource = document.getElementById('audio-source');

        // --- Determine Initial Language ---
        // Read the URL query parameter; if it's "ta", treat it as "none" (i.e. "Tamil Only").
// Determine the language based on the URL query parameter (if provided)
const urlParams = new URLSearchParams(window.location.search);
let queryLang = urlParams.get('lang');
if (queryLang === 'ta') {
  queryLang = 'none';
}

// If a valid query parameter is provided, use it. Otherwise, use the persistent language.
if (queryLang) {
  languageSelect.value = queryLang;
  updateContent(queryLang);
  // Optionally, you can update sessionStorage if you want the override to persist:
  sessionStorage.setItem('selectedLanguage', queryLang);
} else {
  const persistentLang = sessionStorage.getItem('selectedLanguage') || 'none';
  languageSelect.value = persistentLang;
  updateContent();
}

        // Retrieve the user's persistent language (set via the dropdown) from sessionStorage.
        const persistentLang = sessionStorage.getItem('selectedLanguage') || 'none';
        // For rendering the page, use the query language if provided; otherwise, use the persistent value.
        let pageLang = queryLang ? queryLang : persistentLang;
        // Always show the persistent language in the dropdown.
        languageSelect.value = persistentLang;
        
        // --- Update Content Based on Language ---
        function updateContent(langOverride) {
  // Use the override language if provided; otherwise, use the dropdown's current value.
  const lang = langOverride || languageSelect.value;
  let translatedTitle = '';
  let translatedText = '';

  if (lang === 'none') { // "Tamil Only" mode
    translatedTitle = song.title;
    translatedText = formatSongText(song.text);
  } else if (lang === 'en') {
    translatedTitle = `
      <div class="flex justify-between items-center">
        <span>${song.title_en}</span>
        <span class="bg-gray-200 text-gray-700 text-sm px-2 py-1 rounded-md">English</span>
      </div>`;
    translatedText = formatSongText(song.text_en);
  } else if (lang === 'de') {
    translatedTitle = `
      <div class="flex justify-between items-center">
        <span>${song.title_de}</span>
        <span class="bg-gray-200 text-gray-700 text-sm px-2 py-1 rounded-md">German</span>
      </div>`;
    translatedText = formatSongText(song.text_de);
  }

  // Append the Tamil text snippet when a foreign language is selected.
  if (lang !== 'none') {
    const tamilText = `
      <div class="tamil-text mt-6 border-t border-gray-300 pt-4 relative">
        <h3 class="text-lg font-semibold text-darkblue mb-2 flex justify-between items-center">
          <span class="text-darkblue">${song.title}</span>
          <span class="bg-gray-200 text-gray-700 text-sm px-2 py-1 rounded-md">Tamil</span>
        </h3>
        ${formatSongText(song.text)}
      </div>
    `;
    translatedText += tamilText;
  }

  // Render the title and text.
  titleEl.innerHTML = translatedTitle;
  songTextEl.innerHTML = translatedText;

  // Update the document's language attribute.
  document.documentElement.lang = (lang === 'none') ? 'ta' : lang;

  // Only update the persistent language if not using an override.
  if (!langOverride) {
    sessionStorage.setItem('selectedLanguage', languageSelect.value);
  }
}


        // Initial rendering: use the language from the query parameter (if provided) for page content,
        // but keep the dropdown showing the persistent language.
        updateContent(pageLang);

        // When the user changes the language via the dropdown, update content and persistent language.
        languageSelect.addEventListener('change', () => {
          sessionStorage.setItem('selectedLanguage', languageSelect.value);
          updateContent();
        });

        // --- Back Button Behavior ---
        const backButton = document.getElementById('back-button');
        backButton.addEventListener('click', () => {
          if (document.referrer) {
            window.history.back();
          } else {
            window.location.href = '/songbook';
          }
        });

        // --- Audio Handling ---
        // Use the base URL for the audio file.
        const audioUrl = `${import.meta.env.BASE_URL}audio/${song.id}.mp3`;
        try {
          const audioResp = await fetch(audioUrl, { method: 'HEAD' });
          if (audioResp.ok) {
            audioSource.src = audioUrl;
            audioContainer.style.display = 'block';
          }
        } catch (err) {
          console.error('Audio file not found', err);
        }
      }

      init();


      //highlithing function
      // Utility to escape regex special characters
const escapeRegExp = str => str.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');

const highlightElement = (el, query) => {
  const words = query.split(/\s+/).filter(Boolean);
  if (!words.length) return;
  const regex = new RegExp('(' + words.map(escapeRegExp).join('|') + ')', 'giu');
  el.innerHTML = el.innerHTML.replace(regex, '<span class="highlighted">$1</span>');
};

document.addEventListener('DOMContentLoaded', () => {
  const searchQuery = sessionStorage.getItem('searchQuery');
  if (searchQuery && searchQuery.trim() !== '') {
    const titleEl = document.getElementById('song-title'); // target song title
    const songTextEl = document.getElementById('song-text'); // target song text
    if (titleEl) highlightElement(titleEl, searchQuery);
    if (songTextEl) highlightElement(songTextEl, searchQuery);
  }
});

    </script>
  </body>
</html>

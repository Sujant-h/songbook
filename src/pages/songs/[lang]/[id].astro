---
import '../../../styles/global.css';
import songsData from '../../../data/data_cleaned.json';
import { pwaInfo } from 'virtual:pwa-info';

export interface Props {
  title: string;
}

const { title } = Astro.props as Props;

export async function getStaticPaths() {
  const langs = ['ta', 'en', 'de'];
  const paths = [];
  
  langs.forEach(lang => {
    songsData.forEach(song => {
      paths.push({
        params: { lang, id: song.id },
        props: { song, lang },
      });
    });
  });
  
  return paths;
}

const { song, lang } = Astro.props;
const audioUrl = `https://sujant-h.github.io/songbook/audio/${song.id}.mp3`;

// Select content based on language
let songTitle = song.title;
let songText = song.text;
let showOriginal = false;

if (lang === 'en') {
  songTitle = song.title_en || song.title;
  songText = song.text_en || song.text;
  showOriginal = true;
} else if (lang === 'de') {
  songTitle = song.title_de || song.title;
  songText = song.text_de || song.text;
  showOriginal = true;
}
---
<!DOCTYPE html>
<html lang="ta">
  <!-- Blocking script to prevent flash -->
  <script is:inline>
    // Check theme preference and apply it immediately
    const savedTheme = localStorage.getItem('theme');
    const systemPrefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
    
    if (savedTheme === 'dark' || (!savedTheme && systemPrefersDark)) {
      document.documentElement.classList.add('dark');
    }

    // theme-toggle.js
document.addEventListener('DOMContentLoaded', () => {
    // Check for saved theme preference or use the system preference
    const savedTheme = localStorage.getItem('theme');
    const systemPrefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
    
    // Apply the theme based on saved preference or system preference
    if (savedTheme === 'dark' || (!savedTheme && systemPrefersDark)) {
      document.documentElement.classList.add('dark');
    } else {
      document.documentElement.classList.remove('dark');
    }
    
    // Update the toggle button's state
    updateToggleState();
    
    // Add event listener to the theme toggle button
    const themeToggle = document.getElementById('theme-toggle');
    if (themeToggle) {
      themeToggle.addEventListener('click', () => {
        // Toggle the dark class on the html element
        document.documentElement.classList.toggle('dark');
        
        // Save the current preference to localStorage
        const isDark = document.documentElement.classList.contains('dark');
        localStorage.setItem('theme', isDark ? 'dark' : 'light');
        
        // Update the toggle button's state
        updateToggleState();
      });
    }
  });
  
  // Update the toggle button to reflect the current theme
  function updateToggleState() {
    const themeToggle = document.getElementById('theme-toggle');
    const isDark = document.documentElement.classList.contains('dark');
    
    if (themeToggle) {
      const sunIcon = themeToggle.querySelector('.sun-icon');
      const moonIcon = themeToggle.querySelector('.moon-icon');
      
      if (sunIcon && moonIcon) {
        if (isDark) {
          sunIcon.classList.remove('hidden');
          moonIcon.classList.add('hidden');
        } else {
          sunIcon.classList.add('hidden');
          moonIcon.classList.remove('hidden');
        }
      }
    }
  }
  </script>
    <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" href="/favicon.svg" type="image/svg+xml">
    <link rel="apple-touch-icon" href="/pwa-192x192.png">
    <link rel="mask-icon" href="/favicon.svg" color="#FFFFFF">
    <meta name="msapplication-TileColor" content="#FFFFFF">
    <meta name="theme-color" content="#ffffff">
    <title>{title}</title>
    <meta name="description" content={title}>
    <script src="/src/pwa.ts"></script>
    { pwaInfo && <Fragment set:html={pwaInfo.webManifest.linkTag} /> }

    <!-- Material Icons -->
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">

    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link
      href="https://fonts.googleapis.com/css2?family=Noto+Sans+Tamil:wght@100..900&display=swap"
      rel="stylesheet"
    >
  
  </head>


  <body class="bg-gradient-to-b from-indigo-50 to-white min-h-screen dark:from-gray-900 dark:to-gray-800 dark:text-gray-200 transition-colors duration-200">
    <div class="max-w-3xl mx-auto px-4 py-8">
      <!-- Header with back button, language selector, and dark mode toggle -->
     <!-- Header with back button, language selector, and dark mode toggle -->
     <div class="flex justify-between items-center mb-6">
        <a href={`${import.meta.env.BASE_URL}`} id="back-button" class="flex items-center text-indigo-600 hover:text-indigo-800 dark:text-indigo-400 dark:hover:text-indigo-300 transition-colors group">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1 group-hover:-translate-x-1 transition-transform" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
          </svg>
          <span class="font-medium">Home</span>
        </a>
        
        <div class="flex items-center gap-4">
          <!-- Theme Toggle Button -->
          <button 
            id="theme-toggle" 
            class="flex items-center justify-center rounded-full p-2 bg-white dark:bg-gray-800 shadow-sm border border-indigo-100 dark:border-gray-700 text-gray-700 dark:text-gray-200 focus:outline-none focus:ring-2 focus:ring-indigo-300 dark:focus:ring-indigo-600"
            aria-label="Toggle dark mode"
          >
            <!-- Sun icon (shown in dark mode) -->
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-yellow-500 sun-icon hidden" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z" />
            </svg>
            <!-- Moon icon (shown in light mode) -->
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-indigo-600 moon-icon" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z" />
            </svg>
          </button>
    
<!-- After (fixed version with proper arrow placement) -->
<!-- Fixed and centered language selector -->
<div class="relative">
    <div class="flex items-center gap-2 bg-white dark:bg-gray-800 rounded-full px-4 py-2 shadow-sm border border-indigo-100 dark:border-gray-700">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-indigo-600 dark:text-indigo-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5h12M9 3v2m1.048 9.5A18.022 18.022 0 016.412 9m6.088 9h7M11 21l5-10 5 10M12.751 5C11.783 10.77 8.07 15.61 3 18.129" />
      </svg>
      
      <!-- Wrapping select and arrow in a relative container with fixed width -->
      <div class="relative w-24">
        <select 
          id="language-select" 
          class="bg-transparent border-none text-gray-700 dark:text-gray-200 dark:bg-gray-800 font-medium focus:outline-none cursor-pointer appearance-none w-full pr-6 text-center"
        >
          <option value="ta" selected={lang === 'ta'} class="text-center bg-white dark:bg-gray-700">Tamil</option>
          <option value="en" selected={lang === 'en'} class="text-center bg-white dark:bg-gray-700">English</option>
          <option value="de" selected={lang === 'de'} class="text-center bg-white dark:bg-gray-700">German</option>
        </select>
        
        <!-- Arrow positioned correctly within its own parent container -->
        <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center">
          <svg class="h-4 w-4 text-gray-500 dark:text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
          </svg>
        </div>
      </div>
    </div>
  </div>
      </div>
    </div>

      <!-- Main Content Card -->
<!-- Add this data attribute to your main song container div -->
<div class="bg-white dark:bg-gray-800 rounded-xl shadow-lg overflow-hidden mb-8 transition-all hover:shadow-xl dark:shadow-gray-900/30" data-song-id="{song.id}">        <!-- Song Title -->
        <div class="bg-indigo-600 dark:bg-indigo-800 py-6 px-6 sm:px-8">
          <div class="flex items-center gap-3">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-indigo-100" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19V6l12-3v13M9 19c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zm12-3c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zM9 10l12-3" />
            </svg>
            <h1 class="text-2xl sm:text-3xl font-bold text-white">{songTitle}</h1>
          </div>
        </div>
        
<!-- Song Content -->
<div class="p-6 sm:p-8">
  <!-- Song Text - Box removed on mobile, kept on larger screens -->
  <pre class="whitespace-pre-line text-gray-700 dark:text-gray-200 font-sans leading-relaxed sm:p-6 sm:bg-indigo-50 sm:dark:bg-gray-700 sm:rounded-lg sm:border sm:border-indigo-100 sm:dark:border-gray-600">
    {songText}
  </pre>
  
  <!-- Original Tamil -->
  {showOriginal && (
    <div class="mt-8 pt-6 border-t border-gray-200 dark:border-gray-700">
      <div class="flex items-center mb-3">
        <h3 class="text-lg font-semibold text-indigo-800 dark:text-indigo-400">Original (Tamil)</h3>
      </div>
      <h4 class="text-lg font-medium mb-3 text-gray-700 dark:text-gray-300">{song.title}</h4>
      <pre class="whitespace-pre-line text-gray-700 dark:text-gray-200 font-sans leading-relaxed sm:p-6 sm:bg-indigo-50 sm:dark:bg-gray-700 sm:rounded-lg sm:border sm:border-indigo-100 sm:dark:border-gray-600">
        {song.text}
      </pre>
    </div>
  )}
  
  <!-- Audio Player -->
  <div class="mt-8 pt-6 border-t border-gray-200 dark:border-gray-700">
    <div class="flex items-center mb-4">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-indigo-600 dark:text-indigo-400 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z" />
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
      </svg>
      <h3 class="text-lg font-semibold text-indigo-800 dark:text-indigo-400">Listen to the Song</h3>
    </div>
    <div class="bg-indigo-50 dark:bg-gray-700 p-4 rounded-lg border border-indigo-100 dark:border-gray-600">
      <audio controls class="w-full focus:outline-none">
        <source src={audioUrl} type="audio/mpeg">
        Your browser does not support the audio element.
      </audio>
    </div>
  </div>
  
  <!-- Social Media Share Buttons -->
<div class="mt-8 pt-6 border-t border-gray-200 dark:border-gray-700">
  <div class="flex items-center mb-4">
    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-indigo-600 dark:text-indigo-400 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.368 2.684 3 3 0 00-5.368-2.684z" />
    </svg>
    <h3 class="text-lg font-semibold text-indigo-800 dark:text-indigo-400">Share this Song</h3>
  </div>
  
  <div class="flex flex-wrap gap-3">
    <!-- WhatsApp share button -->
    <a 
      id="whatsapp-share" 
      href="#" 
      class="flex items-center gap-2 bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded-lg transition-colors"
      aria-label="Share on WhatsApp"
    >
      <!-- WhatsApp icon -->
      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 24 24" fill="currentColor">
        <path d="M17.472 14.382c-.297-.149-1.758-.867-2.03-.967-.273-.099-.471-.148-.67.15-.197.297-.767.966-.94 1.164-.173.199-.347.223-.644.075-.297-.15-1.255-.463-2.39-1.475-.883-.788-1.48-1.761-1.653-2.059-.173-.297-.018-.458.13-.606.134-.133.298-.347.446-.52.149-.174.198-.298.298-.497.099-.198.05-.371-.025-.52-.075-.149-.669-1.612-.916-2.207-.242-.579-.487-.5-.669-.51-.173-.008-.371-.01-.57-.01-.198 0-.52.074-.792.372-.272.297-1.04 1.016-1.04 2.479 0 1.462 1.065 2.875 1.213 3.074.149.198 2.096 3.2 5.077 4.487.709.306 1.262.489 1.694.625.712.227 1.36.195 1.871.118.571-.085 1.758-.719 2.006-1.413.248-.694.248-1.289.173-1.413-.074-.124-.272-.198-.57-.347m-5.421 7.403h-.004a9.87 9.87 0 01-5.031-1.378l-.361-.214-3.741.982.998-3.648-.235-.374a9.86 9.86 0 01-1.51-5.26c.001-5.45 4.436-9.884 9.888-9.884 2.64 0 5.122 1.03 6.988 2.898a9.825 9.825 0 012.893 6.994c-.003 5.45-4.437 9.884-9.885 9.884m8.413-18.297A11.815 11.815 0 0012.05 0C5.495 0 .16 5.335.157 11.892c0 2.096.547 4.142 1.588 5.945L.057 24l6.305-1.654a11.882 11.882 0 005.683 1.448h.005c6.554 0 11.89-5.335 11.893-11.893a11.821 11.821 0 00-3.48-8.413z"/>
      </svg>
      WhatsApp
    </a>

    <!-- Facebook share button -->
    <a 
      id="facebook-share" 
      href="#" 
      class="flex items-center gap-2 bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg transition-colors"
      aria-label="Share on Facebook"
    >
      <!-- Facebook icon -->
      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 24 24" fill="currentColor">
        <path d="M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z"/>
      </svg>
      Facebook
    </a>

    <!-- Twitter/X share button -->
    <a 
      id="twitter-share" 
      href="#" 
      class="flex items-center gap-2 bg-black hover:bg-gray-800 text-white px-4 py-2 rounded-lg transition-colors"
      aria-label="Share on X"
    >
      <!-- X icon -->
      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 24 24" fill="currentColor">
        <path d="M18.901 1.153h3.68l-8.04 9.19L24 22.846h-7.406l-5.8-7.584-6.638 7.584H.474l8.6-9.83L0 1.154h7.594l5.243 6.932ZM17.61 20.644h2.039L6.486 3.24H4.298Z"/>
      </svg>
      
    </a>

    <!-- Telegram share button -->
    <a 
      id="telegram-share" 
      href="#" 
      class="flex items-center gap-2 bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg transition-colors"
      aria-label="Share on Telegram"
    >
      <!-- Telegram icon -->
      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 24 24" fill="currentColor">
        <path d="M11.944 0A12 12 0 0 0 0 12a12 12 0 0 0 12 12 12 12 0 0 0 12-12A12 12 0 0 0 12 0a12 12 0 0 0-.056 0zm4.962 7.224c.1-.002.321.023.465.14a.506.506 0 0 1 .171.325c.016.093.036.306.02.472-.18 1.898-.96 6.502-1.36 8.627-.168.9-.499 1.201-.82 1.23-.696.065-1.225-.46-1.9-.902-1.056-.693-1.653-1.124-2.678-1.8-1.185-.78-.417-1.21.258-1.91.177-.184 3.247-2.977 3.307-3.23.007-.032.014-.15-.056-.212s-.174-.041-.249-.024c-.106.024-1.793 1.14-5.061 3.345-.48.33-.913.49-1.302.48-.428-.008-1.252-.241-1.865-.44-.752-.245-1.349-.374-1.297-.789.027-.216.325-.437.893-.663 3.498-1.524 5.83-2.529 6.998-3.014 3.332-1.386 4.025-1.627 4.476-1.635z"/>
      </svg>
      Telegram
    </a>

    <!-- Copy Link button -->
    <button 
      id="copy-link" 
      class="flex items-center gap-2 bg-gray-200 hover:bg-gray-300 text-gray-800 dark:bg-gray-700 dark:hover:bg-gray-600 dark:text-gray-200 px-4 py-2 rounded-lg transition-colors"
      aria-label="Copy link"
    >
      <!-- Link icon -->
      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1" />
      </svg>
      Copy Link
    </button>
  </div>
</div>
</div>

  
  <button 
    id="print-song" 
    class="flex items-center gap-2 bg-indigo-100 hover:bg-indigo-200 text-indigo-800 dark:bg-indigo-900 dark:hover:bg-indigo-800 dark:text-indigo-200 px-4 py-2 rounded-lg transition-colors mt-2"
  >
    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 17h2a2 2 0 002-2v-4a2 2 0 00-2-2H5a2 2 0 00-2 2v4a2 2 0 002 2h2m2 4h6a2 2 0 002-2v-4a2 2 0 00-2-2H9a2 2 0 00-2 2v4a2 2 0 002 2zm8-12V5a2 2 0 00-2-2H9a2 2 0 00-2 2v4h10z" />
    </svg>
    Print Song Lyrics
  </button>
</div>

</div>
      <!-- Footer -->
      <footer class="text-center text-gray-500 dark:text-gray-400 text-sm mt-8">
        <p>© 2025 Tamil Christian Songbook</p>
      </footer>


    <script>

  // New approach: Open a new window for printing
  document.addEventListener('DOMContentLoaded', function() {
    const printButton = document.getElementById('print-song');
    if (printButton) {
      printButton.addEventListener('click', function() {
        try {
          
          // Get song data
          const titleElement = document.querySelector('h1');
          const songTitle = titleElement ? titleElement.textContent.trim() : "Song Title";
          
          // Get song text
          const firstPre = document.querySelector('pre');
          const songText = firstPre ? firstPre.textContent.trim() : "Song lyrics not found";
          
          // Get original Tamil if available
          let originalTitle = "";
          let originalText = "";
          
          // Check for original section
          const originalSection = document.querySelector('.mt-8.pt-6');
          if (originalSection) {
            const titleEl = originalSection.querySelector('h4');
            if (titleEl) {
              originalTitle = titleEl.textContent.trim();
            }
            
            const originalPre = originalSection.querySelector('pre');
            if (originalPre) {
              originalText = originalPre.textContent.trim();
            }
          }
          
          // Create HTML for the new window
          const printHTML = `
            <!DOCTYPE html>
            <html>
            <head>
              <meta charset="UTF-8">
              <style>
                body {
                  font-family: Arial, sans-serif;
                  max-width: 800px;
                  margin: 0 auto;
                  padding: 20px;
                }
                .print-header {
                  text-align: center;
                  margin-bottom: 20px;
                  border-bottom: 1px solid #ccc;
                  padding-bottom: 10px;
                }
                .print-title {
                  font-size: 24px;
                  font-weight: bold;
                  margin-bottom: 5px;
                }
                .print-subtitle {
                  font-size: 14px;
                  color: #555;
                  margin-bottom: 20px;
                }
                .print-lyrics {
                  white-space: pre-line;
                  font-size: 14px;
                  line-height: 1.6;
                  margin-bottom: 30px;
                }
                .print-original {
                  margin-top: 30px;
                  padding-top: 20px;
                  border-top: 1px dashed #ccc;
                }
                .print-original-title {
                  font-weight: bold;
                  margin-bottom: 10px;
                  font-size: 18px;
                }
                .print-footer {
                  margin-top: 30px;
                  text-align: center;
                  font-size: 12px;
                  color: #777;
                  border-top: 1px solid #ccc;
                  padding-top: 10px;
                }
                @media print {
                  body {
                    padding: 0;
                  }
                  .no-print {
                    display: none;
                  }
                }
              </style>
            </head>
            <body>
              <div class="print-header">
                <div class="print-title">${songTitle}</div>
              </div>
              
              <div class="print-lyrics">${songText}</div>
              
              ${originalTitle && originalText ? `
                <div class="print-original">
                  <div class="print-original-title">Original (Tamil): ${originalTitle}</div>
                  <div class="print-lyrics">${originalText}</div>
                </div>
              ` : ''}
              
              <div class="print-footer">
                Printed from Tamil Christian Songbook on ${new Date().toLocaleDateString()}
                <br>
                ${window.location.href}
              </div>
              
              <div class="no-print" style="text-align: center; margin-top: 30px;">
                <button onclick="window.print();" style="padding: 10px 20px; background: #4f46e5; color: white; border: none; border-radius: 4px; cursor: pointer; font-size: 16px;">
                  Print Now
                </button>
                <button onclick="window.close();" style="padding: 10px 20px; background: #9ca3af; color: white; border: none; border-radius: 4px; cursor: pointer; font-size: 16px; margin-left: 10px;">
                  Close
                </button>
              </div>
            </body>
            </html>
          `;
          
          // Open a new window and write the content
          const printWindow = window.open('', 'PrintSong', 'width=800,height=600');
          printWindow.document.write(printHTML);
          printWindow.document.close();
          
          // Focus the new window
          printWindow.focus();
          
          // You can automatically print, or let the user click the Print button in the new window
          // printWindow.print();
          
        } catch (error) {
          console.error("Error in print function:", error);
          alert("Sorry, there was a problem preparing the song for printing. Please try again.");
        }
      });
    }
  });
        // Social media share functionality
  document.addEventListener('DOMContentLoaded', function() {
    // Get the song title
    const songTitle = document.querySelector('h1').textContent;
    // Current URL
    const url = window.location.href;
    // Create share text
    const shareText = `${songTitle} - Listen to this beautiful song on Tamil Christian Songbook`;
    
    // WhatsApp share
    const whatsappBtn = document.getElementById('whatsapp-share');
    if (whatsappBtn) {
      whatsappBtn.addEventListener('click', function(e) {
        e.preventDefault();
        const whatsappUrl = `https://wa.me/?text=${encodeURIComponent(shareText + ': ' + url)}`;
        window.open(whatsappUrl, '_blank');
      });
    }
    
    // Facebook share
    const facebookBtn = document.getElementById('facebook-share');
    if (facebookBtn) {
      facebookBtn.addEventListener('click', function(e) {
        e.preventDefault();
        const facebookUrl = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(url)}`;
        window.open(facebookUrl, '_blank');
      });
    }
    
    // Twitter/X share
    const twitterBtn = document.getElementById('twitter-share');
    if (twitterBtn) {
      twitterBtn.addEventListener('click', function(e) {
        e.preventDefault();
        const twitterUrl = `https://twitter.com/intent/tweet?text=${encodeURIComponent(shareText)}&url=${encodeURIComponent(url)}`;
        window.open(twitterUrl, '_blank');
      });
    }
    
    // Telegram share
    const telegramBtn = document.getElementById('telegram-share');
    if (telegramBtn) {
      telegramBtn.addEventListener('click', function(e) {
        e.preventDefault();
        const telegramUrl = `https://t.me/share/url?url=${encodeURIComponent(url)}&text=${encodeURIComponent(shareText)}`;
        window.open(telegramUrl, '_blank');
      });
    }
    
    // Copy link functionality
    const copyLinkBtn = document.getElementById('copy-link');
    if (copyLinkBtn) {
      copyLinkBtn.addEventListener('click', function() {
        // Create a temporary input element
        const tempInput = document.createElement('input');
        tempInput.value = url;
        document.body.appendChild(tempInput);
        
        // Select and copy the link
        tempInput.select();
        document.execCommand('copy');
        
        // Remove the temporary element
        document.body.removeChild(tempInput);
        
        // Visual feedback for user
        const originalText = this.innerHTML;
        this.innerHTML = `
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-green-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
          </svg>
          Copied!
        `;
        
        // Reset button after 2 seconds
        setTimeout(() => {
          this.innerHTML = originalText;
        }, 2000);
      });
    }
  });



      // Centralized language switching function
function switchLanguage(selectedLang) {
  // Get the current URL path
  const currentPath = window.location.pathname;
  const pathParts = currentPath.split('/');
  
  // Try to extract the song ID from the path
  let songId = '';
  
  // Look for the song ID in different possible locations
  if (pathParts.length > 0) {
    // First try: assume it's the last part of the path
    songId = pathParts[pathParts.length - 1];
    
    // Validation: Check if songId is actually a numeric ID
    if (!/^\d+$/.test(songId)) {
      // If not numeric, try another approach: look for patterns in the path
      const songsIndex = pathParts.indexOf('songs');
      if (songsIndex >= 0 && songsIndex + 2 < pathParts.length) {
        // Format should be /songs/{lang}/{id}
        songId = pathParts[songsIndex + 2];
      } else {
        // If we still can't find it, check if the song ID is available in the page content
        const songIdElement = document.querySelector('[data-song-id]');
        if (songIdElement) {
          songId = songIdElement.dataset.songId;
        } else {
          console.error('Could not determine song ID. Redirecting to home page.');
          window.location.href = '/songbook';
          return;
        }
      }
    }
  }
  
  // Ensure we have a base path
  let basePath = '/songbook';
  // Check if we're in a development environment without the /songbook prefix
  if (!currentPath.includes('/songbook') && currentPath.includes('/songs/')) {
    basePath = '';
  }
  
  // Construct the new URL
  const newUrl = `${basePath}/songs/${selectedLang}/${songId}`;
  
  // Save language preference
  sessionStorage.setItem('selectedLanguage', selectedLang);
  
  // Navigate to the new URL
  window.location.href = newUrl;
}

// Add event listener to the language selector
document.getElementById('language-select').addEventListener('change', (e) => {
  const selectedLang = e.target.value;
  switchLanguage(selectedLang);
});
        
        // Search term highlighting functionality
        function highlightSearchTerm() {
          // Get search query from URL parameters or sessionStorage
          const urlParams = new URLSearchParams(window.location.search);
          const searchQuery = urlParams.get('q') || sessionStorage.getItem('searchQuery');
          
          if (!searchQuery || searchQuery.trim() === '') return;
          
          // Function to highlight matches in text
          function highlightMatches(element, searchTerm) {
            if (!element || !searchTerm || searchTerm.trim() === '') return;
            
            const text = element.innerHTML;
            const regex = new RegExp(`(${searchTerm.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&')})`, 'gi');
            
            // Only process if there's a match
            if (regex.test(text)) {
              element.innerHTML = text.replace(regex, '<mark class="bg-yellow-200 text-gray-800">$1</mark>');
            }
          }
          
          // Highlight matches in song title
          const titleElement = document.querySelector('h1');
          highlightMatches(titleElement, searchQuery);
          
          // Highlight matches in song text
          const textElements = document.querySelectorAll('pre');
          textElements.forEach(element => {
            highlightMatches(element, searchQuery);
          });
          
          // Add a search badge at the top if matches were found
          const songContent = document.querySelector('.p-6.sm\\:p-8');
          if (songContent) {
            // Check if any highlights were added
            const highlights = document.querySelectorAll('mark.bg-yellow-200');
            
            if (highlights.length > 0) {
              // Create the search badge
              const searchBadge = document.createElement('div');
              searchBadge.className = 'mb-4 flex items-center gap-2 text-sm bg-indigo-100 text-indigo-800 px-3 py-2 rounded-lg';
              searchBadge.innerHTML = `
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                </svg>
                <span>Showing ${highlights.length} matches for "${searchQuery}"</span>
                <button id="clearHighlights" class="ml-auto text-indigo-600 hover:text-indigo-800">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              `;
              
              // Insert at the beginning of the content
              songContent.insertBefore(searchBadge, songContent.firstChild);
              
              // Add clear highlights functionality
              document.getElementById('clearHighlights').addEventListener('click', () => {
                // Remove all highlights
                document.querySelectorAll('mark.bg-yellow-200').forEach(mark => {
                  const parent = mark.parentNode;
                  const text = mark.textContent;
                  const textNode = document.createTextNode(text);
                  parent.replaceChild(textNode, mark);
                });
                
                // Remove the search badge
                searchBadge.remove();
              });
              
              // Add keyboard navigation between highlights
              let currentHighlightIndex = -1;
              
              function navigateHighlights(direction) {
                const highlights = document.querySelectorAll('mark.bg-yellow-200');
                if (highlights.length === 0) return;
                
                // Remove current highlight
                if (currentHighlightIndex >= 0 && currentHighlightIndex < highlights.length) {
                  highlights[currentHighlightIndex].classList.remove('ring', 'ring-indigo-500');
                }
                
                // Update index
                currentHighlightIndex += direction;
                if (currentHighlightIndex >= highlights.length) currentHighlightIndex = 0;
                if (currentHighlightIndex < 0) currentHighlightIndex = highlights.length - 1;
                
                // Highlight current and scroll to it
                const currentHighlight = highlights[currentHighlightIndex];
                currentHighlight.classList.add('ring', 'ring-indigo-500');
                currentHighlight.scrollIntoView({ behavior: 'smooth', block: 'center' });
                
                // Update the counter in search badge
                const counter = document.querySelector('#highlightCounter');
                if (counter) {
                  counter.textContent = `${currentHighlightIndex + 1}/${highlights.length}`;
                } else {
                  const counterSpan = document.createElement('span');
                  counterSpan.id = 'highlightCounter';
                  counterSpan.className = 'ml-2 bg-indigo-200 text-indigo-800 px-2 py-0.5 rounded-full text-xs';
                  counterSpan.textContent = `${currentHighlightIndex + 1}/${highlights.length}`;
                  searchBadge.querySelector('span').appendChild(counterSpan);
                }
              }
              
              // Add navigation buttons to search badge
              const navButtons = document.createElement('div');
              navButtons.className = 'flex items-center gap-1 ml-2';
              navButtons.innerHTML = `
                <button id="prevHighlight" class="p-1 rounded-full hover:bg-indigo-200" title="Previous match">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
                  </svg>
                </button>
                <button id="nextHighlight" class="p-1 rounded-full hover:bg-indigo-200" title="Next match">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                  </svg>
                </button>
              `;
              
              searchBadge.insertBefore(navButtons, document.getElementById('clearHighlights'));
              
              document.getElementById('prevHighlight').addEventListener('click', () => navigateHighlights(-1));
              document.getElementById('nextHighlight').addEventListener('click', () => navigateHighlights(1));
              
              // Start with the first highlight
              navigateHighlights(1);
              
              // Keyboard shortcuts for navigation
              document.addEventListener('keydown', (e) => {
                if (e.key === 'F3' || (e.ctrlKey && e.key === 'g')) {
                  e.preventDefault();
                  navigateHighlights(1);
                } else if (e.shiftKey && e.key === 'F3' || (e.ctrlKey && e.shiftKey && e.key === 'g')) {
                  e.preventDefault();
                  navigateHighlights(-1);
                }
              });
            }
          }
        }
        
        // Run the highlight function when the page is loaded
        document.addEventListener('DOMContentLoaded', highlightSearchTerm);
        
        // Persist search query when navigating between songs
        function updateSearchParamOnLinks() {
          const urlParams = new URLSearchParams(window.location.search);
          const searchQuery = urlParams.get('q') || sessionStorage.getItem('searchQuery');
          
          if (searchQuery) {
            // Update links to other songs to include the search parameter
            document.querySelectorAll('a[href^="/songs/"]').forEach(link => {
              const url = new URL(link.href, window.location.origin);
              url.searchParams.set('q', searchQuery);
              link.href = url.pathname + url.search;
            });
          }
        }
        
        
        
            </script>
<!-- Completely revised print container and function -->
<div id="print-container" style="display:none;"></div>

  </body>
</html>

---
import '../../../styles/global.css';
import songsData from '../../../data/data_cleaned.json';
import { pwaInfo } from 'virtual:pwa-info';

export interface Props {
  title: string;
}

const { title } = Astro.props as Props;

export async function getStaticPaths() {
  const langs = ['ta', 'en', 'de'];
  const paths = [];
  
  langs.forEach(lang => {
    songsData.forEach(song => {
      paths.push({
        params: { lang, id: song.id },
        props: { song, lang },
      });
    });
  });
  
  return paths;
}

const { song, lang } = Astro.props;
const audioUrl = `https://songs.c-g-m.eu/audio/${song.id}.mp3`;

// Select content based on language
let songId = song.id;
let songTitle = song.title;
let songText = song.text;
let showOriginal = false;

if (lang === 'en') {
  songTitle = song.title_en || song.title;
  songText = song.text_en || song.text;
  showOriginal = true;
} else if (lang === 'de') {
  songTitle = song.title_de || song.title;
  songText = song.text_de || song.text;
  showOriginal = true;
}
---
<!DOCTYPE html>
<html lang="ta">
  <!-- Blocking script to prevent flash -->
  <script is:inline>
    // Check theme preference and apply it immediately
    const savedTheme = localStorage.getItem('theme');
    const systemPrefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
    
    if (savedTheme === 'dark' || (!savedTheme && systemPrefersDark)) {
      document.documentElement.classList.add('dark');
    }

    // theme-toggle.js
    document.addEventListener('DOMContentLoaded', () => {
      // Check for saved theme preference or use the system preference
      const savedTheme = localStorage.getItem('theme');
      const systemPrefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
      
      // Apply the theme based on saved preference or system preference
      if (savedTheme === 'dark' || (!savedTheme && systemPrefersDark)) {
        document.documentElement.classList.add('dark');
      } else {
        document.documentElement.classList.remove('dark');
      }
      
      // Update the toggle button's state
      updateToggleState();
      
      // Add event listener to the theme toggle button
      const themeToggle = document.getElementById('theme-toggle');
      if (themeToggle) {
        themeToggle.addEventListener('click', () => {
          // Toggle the dark class on the html element
          document.documentElement.classList.toggle('dark');
          
          // Save the current preference to localStorage
          const isDark = document.documentElement.classList.contains('dark');
          localStorage.setItem('theme', isDark ? 'dark' : 'light');
          
          // Update the toggle button's state
          updateToggleState();
        });
      }
    });
    
    // Update the toggle button to reflect the current theme
    function updateToggleState() {
      const themeToggle = document.getElementById('theme-toggle');
      const isDark = document.documentElement.classList.contains('dark');
      
      if (themeToggle) {
        const sunIcon = themeToggle.querySelector('.sun-icon');
        const moonIcon = themeToggle.querySelector('.moon-icon');
        
        if (sunIcon && moonIcon) {
          if (isDark) {
            sunIcon.classList.remove('hidden');
            moonIcon.classList.add('hidden');
          } else {
            sunIcon.classList.add('hidden');
            moonIcon.classList.remove('hidden');
          }
        }
      }
    }
  </script>
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  
  <!-- Favicon and App Icons -->
  <link rel="icon" href="/favicon.svg" type="image/svg+xml">
  <link rel="apple-touch-icon" href="/pwa-192x192.png">
  <link rel="mask-icon" href="/favicon.svg" color="#6366F1">
  
  <!-- Theme Colors -->
  <meta name="msapplication-TileColor" content="#6366F1">
  <meta name="theme-color" content="#6366F1" media="(prefers-color-scheme: light)">
  <meta name="theme-color" content="#1F2937" media="(prefers-color-scheme: dark)">
  
  <!-- SEO Meta Tags -->
  <title>{songId}{': '} {songTitle} | Tamil Christian Song {lang === 'en' ? 'English Translation' : lang === 'de' ? 'German Translation' : ''}</title>
  <meta name="description" content={`${songId}: ${songTitle} - ${songText.substring(0, 150)}...`}>
  <meta name="keywords" content="Tamil Christian song, {songTitle}, Christian worship, {lang === 'en' ? 'English translation' : lang === 'de' ? 'German translation' : 'Tamil lyrics'}, Christian music, Tamil hymn">
  <meta name="author" content="Tamil Christian Songbook">
  
  <!-- Language Alternate Links -->
  <link rel="alternate" hreflang="ta" href={`${import.meta.env.BASE_URL}/songs/ta/${song.id}`}>
  <link rel="alternate" hreflang="en" href={`${import.meta.env.BASE_URL}/songs/en/${song.id}`}>
  <link rel="alternate" hreflang="de" href={`${import.meta.env.BASE_URL}/songs/de/${song.id}`}>
  
  <!-- Canonical URL -->
  <link rel="canonical" href={`https://sujant-h.github.io/songbook/songs/${lang}/${song.id}`}>
  
  <!-- Open Graph / Social Media Tags -->
  <meta property="og:type" content="music.song">
  <meta property="og:url" content={`https://sujant-h.github.io/songbook/songs/${lang}/${song.id}`}>
  <meta property="og:title" content={`${songId}: ${songTitle} | Tamil Christian Song`}>
  <meta property="og:description" content={`Listen to the original Tamil song ${songId}: ${songTitle} ${lang === 'en' ? 'with English translation' : lang === 'de' ? 'with German translation' : ''}`}>
  <meta property="og:image" content="https://sujant-h.github.io/songbook/og-song-image.jpg">
  <meta property="og:audio" content={audioUrl}>
  
  <!-- Twitter Card Tags -->
  <meta name="twitter:card" content="summary_large_image">
  <meta name="twitter:title" content={`${songId}: ${songTitle} | Tamil Christian Song`}>
  <meta name="twitter:description" content={`Listen to the original Tamil song ${songId}: ${songTitle} ${lang === 'en' ? 'with English translation' : lang === 'de' ? 'with German translation' : ''}`}>  
  <meta name="twitter:image" content="https://sujant-h.github.io/songbook/og-song-image.jpg">
  
  <!-- PWA Related -->
  <script src="/src/pwa.ts"></script>
  { pwaInfo && <Fragment set:html={pwaInfo.webManifest.linkTag} /> }
  
  <!-- Fonts -->
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Noto+Sans+Tamil:wght@100..900&family=Inter:wght@300..700&display=swap" rel="stylesheet">
  
  <!-- Material Icons -->
  <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
  
  <!-- Structured Data / JSON-LD for a Music Recording -->
  <script type="application/ld+json">
    {
      "@context": "https://schema.org",
      "@type": "MusicComposition",
      "name": "${songId}: ${songTitle}",
      "inLanguage": "${lang}",
      "alternateName": "${songId}: ${song.title}",
      "description": "${songText.substring(0, 200).replace(/\n/g, ' ')}...",
      "musicCompositionForm": "Hymn",
      "lyrics": {
        "@type": "CreativeWork",
        "text": "${songText.replace(/\n/g, '\\n')}"
      },
      "contentUrl": "${audioUrl}",
      "potentialAction": {
        "@type": "ListenAction",
        "target": "${audioUrl}"
      }
    }
  </script>
</head>

<body class="bg-gradient-to-b from-indigo-50/40 to-white dark:from-gray-900 dark:to-gray-800 min-h-screen dark:text-gray-200 transition-colors duration-300 font-sans">
  <div class="max-w-4xl mx-auto px-4 py-8">
    <!-- Top Navigation Bar with Back button, Language, and Theme Toggle -->
   <!-- Top Navigation Bar with Back button, Language, and Theme Toggle - Balanced for mobile -->
<header class="top-0 z-10 backdrop-blur-lg bg-white/80 dark:bg-gray-900/80 border-b border-gray-100 dark:border-gray-800 rounded-lg sm:rounded-xl shadow-sm mb-5 sm:mb-6 px-3 sm:px-4 py-2.5 sm:py-3">
  <div class="flex justify-between items-center">
    <!-- Back Button with improved hover effect -->
    <a href={`${import.meta.env.BASE_URL}`} id="back-button" class="flex items-center text-indigo-600 hover:text-indigo-500 dark:text-indigo-400 dark:hover:text-indigo-300 transition-all duration-200 group">
      <span class="flex items-center justify-center w-7 sm:w-8 h-7 sm:h-8 rounded-full bg-indigo-50 dark:bg-indigo-900/30 mr-2 group-hover:-translate-x-1 transition-transform duration-200">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 sm:h-5 sm:w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
        </svg>
      </span>
      <span class="text-sm sm:text-base font-medium">Home</span>
    </a>
    
    <div class="flex items-center gap-2 sm:gap-3">
      <!-- Theme Toggle Button - Optimized for mobile -->
      <button 
        id="theme-toggle" 
        class="p-1.5 sm:p-2 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-full hover:shadow-md focus:outline-none focus:ring-2 focus:ring-indigo-300 dark:focus:ring-indigo-500 text-gray-700 dark:text-gray-200 transition-all duration-200"
        aria-label="Toggle dark mode"
      >
        <!-- Sun icon (shown in dark mode) -->
        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 sm:h-5 sm:w-5 text-amber-500 rotate-0 scale-100 transition-all duration-300 sun-icon hidden" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z" />
        </svg>
        <!-- Moon icon (shown in light mode) -->
        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 sm:h-5 sm:w-5 text-indigo-600 rotate-0 scale-100 transition-all duration-300 moon-icon" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z" />
        </svg>
      </button>
  
      <!-- Language Selector - Improved for mobile -->
      <div class="relative">
        <div class="bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg hover:shadow-md transition-shadow duration-200">
          <div class="relative">
            <select 
              id="language-select" 
              class="appearance-none bg-transparent w-full pl-3 sm:pl-4 pr-8 sm:pr-10 py-1.5 sm:py-2 border-none text-gray-700 dark:text-gray-200 text-sm sm:text-base font-medium focus:outline-none cursor-pointer"
            >
              <option value="ta" selected={lang === 'ta'} class="bg-white dark:bg-gray-800">Tamil</option>
              <option value="en" selected={lang === 'en'} class="bg-white dark:bg-gray-800">English</option>
              <option value="de" selected={lang === 'de'} class="bg-white dark:bg-gray-800">German</option>
            </select>
            
            <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-indigo-600 dark:text-indigo-400">
              <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
              </svg>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</header>

<!-- Main Content with Card Shadow & Animation -->
<main>
  <!-- Main song card - Better balanced for mobile -->
  <div class="bg-white dark:bg-gray-800 rounded-xl sm:rounded-2xl border border-gray-100 dark:border-gray-700 shadow-md hover:shadow-lg transition-all duration-300 mb-8 overflow-hidden" data-song-id={song.id}>
    <!-- Song Title Banner - Balanced for mobile -->
    <div class="bg-gradient-to-r from-indigo-600 to-indigo-500 dark:from-indigo-700 dark:to-indigo-600 py-5 px-4 sm:px-6">
      <div class="flex items-center flex-wrap gap-2">
        <div class="flex items-center">
          <span class="inline-flex items-center justify-center bg-white dark:bg-indigo-900/60 text-indigo-600 dark:text-indigo-200 text-sm font-bold rounded-lg h-7 sm:h-8 min-w-[2rem] sm:min-w-[2.5rem] px-2 sm:px-3 mr-2 sm:mr-3 shadow-sm">
            {songId}
          </span>
          <h1 class="text-xl sm:text-2xl md:text-3xl font-bold text-white leading-tight">{songTitle}</h1>
        </div>
      </div>
    </div>
        
    <!-- Song Content with improved typography - Balanced for mobile -->
    <div class="p-3 sm:p-5 md:p-8">
      <!-- Song Text -->
      <div class="relative">
        <pre class="whitespace-pre-line text-gray-700 dark:text-gray-200 font-sans text-base leading-relaxed p-4 sm:p-6 bg-gray-50 dark:bg-gray-700/40 rounded-lg sm:rounded-xl border border-gray-100 dark:border-gray-700 shadow-inner">
          {songText}
        </pre>
      </div>
      
      <!-- Original Tamil version with balanced padding -->
      {showOriginal && (
        <div class="mt-6 sm:mt-8 pt-5 sm:pt-6 border-t border-gray-200 dark:border-gray-700">
          <div class="flex items-center justify-between mb-4">
            <h3 class="text-lg font-semibold text-gray-800 dark:text-gray-200 flex items-center">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2 text-indigo-500 dark:text-indigo-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5h12M9 3v2m1.048 9.5A18.022 18.022 0 016.412 9m6.088 9h7M11 21l5-10 5 10M12.751 5C11.783 10.77 8.07 15.61 3 18.129" />
              </svg>
              Original Version
            </h3>
            <span class="inline-flex items-center justify-center bg-indigo-100 dark:bg-indigo-900/50 text-indigo-700 dark:text-indigo-300 text-sm font-medium rounded-full px-3 py-1">
              Tamil
            </span>
          </div>
          <div class="flex items-center mb-4">
            <span class="inline-flex items-center justify-center bg-indigo-100 dark:bg-indigo-900/60 text-indigo-700 dark:text-indigo-300 text-sm font-medium rounded-lg h-7 sm:h-8 min-w-[2rem] sm:min-w-[2.5rem] px-2 sm:px-3 mr-2 sm:mr-3">
              {song.id}
            </span>
            <h4 class="text-lg font-medium text-gray-800 dark:text-gray-300">{song.title}</h4>
          </div>
          <pre class="whitespace-pre-line text-gray-700 dark:text-gray-200 font-sans text-base leading-relaxed p-4 sm:p-6 bg-gray-50 dark:bg-gray-700/40 rounded-lg sm:rounded-xl border border-gray-100 dark:border-gray-700 shadow-inner">
            {song.text}
          </pre>
        </div>
      )}

<!-- Enhanced Audio Player with robust error handling and fallbacks -->
<div class="mt-6 sm:mt-8 pt-5 sm:pt-6 border-t border-gray-200 dark:border-gray-700 audio-player-section">
  <div class="flex items-center justify-between mb-4">
    <div class="flex items-center">
      <div class="w-8 h-8 sm:w-10 sm:h-10 rounded-full bg-indigo-100 dark:bg-indigo-900/30 flex items-center justify-center mr-2 sm:mr-3">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 sm:h-5 sm:w-5 text-indigo-600 dark:text-indigo-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19V6l12-3v13M9 19c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zm12-3c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zM9 10l12-3" />
        </svg>
      </div>
      <h3 class="text-base sm:text-lg font-semibold text-gray-800 dark:text-gray-300">Listen to the Song</h3>
    </div>
    <div id="audio-download-btn" class="hidden">
      <a href="#" download class="flex items-center gap-1 sm:gap-2 text-xs sm:text-sm text-indigo-600 hover:text-indigo-500 dark:text-indigo-400 dark:hover:text-indigo-300">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 sm:h-4 sm:w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4" />
        </svg>
        Download
      </a>
    </div>
  </div>

  <!-- Audio Player Container -->
  <div class="bg-gradient-to-r from-indigo-50 to-purple-50 dark:from-indigo-900/20 dark:to-purple-900/20 p-4 sm:p-6 rounded-lg sm:rounded-xl border border-indigo-100 dark:border-indigo-800/50 shadow-inner overflow-hidden relative">
    <!-- Preload metadata to avoid initial playback issues -->
    <audio id="audio-element" class="hidden" preload="metadata">
      <source src={audioUrl} type="audio/mpeg">
      <source src={audioUrl} type="audio/mp3">
      Your browser does not support the audio element.
    </audio>
    
    <!-- Audio Status Message - For debugging and user feedback -->
    <div id="audio-status" class="hidden absolute top-1 left-0 right-0 text-center text-xs text-indigo-600 dark:text-indigo-400 bg-indigo-100 dark:bg-indigo-900/50 py-1 px-2 rounded-t-lg opacity-80 z-20"></div>
    
    <!-- Custom Audio Controls -->
    <div class="flex items-center gap-4">
      <!-- Play/Pause Button -->
      <button id="play-pause-btn" class="w-10 h-10 sm:w-12 sm:h-12 flex-shrink-0 bg-indigo-600 hover:bg-indigo-500 dark:bg-indigo-700 dark:hover:bg-indigo-600 rounded-full flex items-center justify-center shadow-md transition-all duration-200 text-white focus:outline-none focus:ring-2 focus:ring-indigo-400 focus:ring-offset-2 dark:focus:ring-offset-gray-800">
        <!-- Loading Indicator (hidden by default) -->
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 sm:h-6 sm:w-6 loading-icon hidden animate-spin" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
        </svg>
        <!-- Play Icon (visible by default) -->
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 sm:h-6 sm:w-6 play-icon" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z" />
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
        <!-- Pause Icon (hidden by default) -->
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 sm:h-6 sm:w-6 pause-icon hidden" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 9v6m4-6v6m7-3a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
        <!-- Error Icon (hidden by default) -->
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 sm:h-6 sm:w-6 error-icon hidden" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
      </button>
      
      <!-- Progress and Controls -->
      <div class="flex-1">
        <!-- Song info badge -->
        <div class="flex items-center mb-2">
          <span class="inline-flex items-center justify-center text-xs font-medium px-2 py-0.5 rounded-full bg-indigo-100 dark:bg-indigo-900/40 text-indigo-800 dark:text-indigo-300">
            Song {songId}
          </span>
        </div>
        
        <!-- Timeline -->
        <div class="relative w-full h-2 bg-gray-200 dark:bg-gray-700 rounded-full overflow-hidden">
          <input type="range" id="seek-slider" min="0" max="100" value="0" class="absolute inset-0 w-full h-full opacity-0 cursor-pointer z-10" />
          <div id="progress-bar" class="h-full bg-indigo-500 dark:bg-indigo-400 rounded-full" style="width: 0%"></div>
        </div>
        
        <!-- Time and Volume Controls -->
        <div class="flex justify-between items-center mt-2 text-xs">
          <!-- Time Display -->
          <div class="flex items-center gap-2 text-gray-600 dark:text-gray-400">
            <span id="current-time">0:00</span>
            <span>/</span>
            <span id="duration">0:00</span>
          </div>
          
          <!-- Volume Control (Smaller) -->
          <div class="flex items-center gap-2 w-24">
            <!-- Mute/Unmute Button -->
            <button id="mute-btn" class="w-6 h-6 flex items-center justify-center text-gray-600 dark:text-gray-300 hover:text-indigo-600 dark:hover:text-indigo-400 transition-colors">
              <!-- Volume Icon (visible by default) -->
              <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 volume-icon" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.536 8.464a5 5 0 010 7.072m2.828-9.9a9 9 0 010 12.728M5.586 15H4a1 1 0 01-1-1v-4a1 1 0 011-1h1.586l4.707-4.707C10.923 3.663 12 4.109 12 5v14c0 .891-1.077 1.337-1.707.707L5.586 15z" />
              </svg>
              <!-- Mute Icon (hidden by default) -->
              <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mute-icon hidden" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5.586 15H4a1 1 0 01-1-1v-4a1 1 0 011-1h1.586l4.707-4.707C10.923 3.663 12 4.109 12 5v14c0 .891-1.077 1.337-1.707.707L5.586 15z" />
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2" />
              </svg>
            </button>
            
            <!-- Smaller Volume Slider -->
            <div class="relative w-full h-1.5 bg-gray-200 dark:bg-gray-700 rounded-full overflow-hidden">
              <input type="range" id="volume-slider" min="0" max="100" value="100" class="absolute inset-0 w-full h-full opacity-0 cursor-pointer z-10" />
              <div id="volume-level" class="h-full bg-indigo-400 dark:bg-indigo-500 rounded-full" style="width: 100%"></div>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Retry Button (hidden by default) -->
    <div id="retry-container" class="hidden absolute inset-0 bg-white/60 dark:bg-gray-900/60 backdrop-blur-sm flex items-center justify-center">
      <button id="retry-button" class="px-4 py-2 bg-indigo-600 hover:bg-indigo-500 text-white rounded-lg flex items-center gap-2 shadow-lg transform hover:scale-105 transition-all">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
        </svg>
        Retry Loading
      </button>
    </div>
    
    <!-- Subtle Audio Visualization -->
    <div class="absolute bottom-0 left-0 right-0 h-6 flex items-end justify-center gap-px opacity-20 pointer-events-none">
      <div class="visualization-bar w-0.5 h-0 bg-indigo-500 dark:bg-indigo-400 rounded-t transition-all duration-200"></div>
      <div class="visualization-bar w-0.5 h-0 bg-indigo-500 dark:bg-indigo-400 rounded-t transition-all duration-200"></div>
      <div class="visualization-bar w-0.5 h-0 bg-indigo-500 dark:bg-indigo-400 rounded-t transition-all duration-200"></div>
      <div class="visualization-bar w-0.5 h-0 bg-indigo-500 dark:bg-indigo-400 rounded-t transition-all duration-200"></div>
      <div class="visualization-bar w-0.5 h-0 bg-indigo-500 dark:bg-indigo-400 rounded-t transition-all duration-200"></div>
      <div class="visualization-bar w-0.5 h-0 bg-indigo-500 dark:bg-indigo-400 rounded-t transition-all duration-200"></div>
      <div class="visualization-bar w-0.5 h-0 bg-indigo-500 dark:bg-indigo-400 rounded-t transition-all duration-200"></div>
      <div class="visualization-bar w-0.5 h-0 bg-indigo-500 dark:bg-indigo-400 rounded-t transition-all duration-200"></div>
      <div class="visualization-bar w-0.5 h-0 bg-indigo-500 dark:bg-indigo-400 rounded-t transition-all duration-200"></div>
      <div class="visualization-bar w-0.5 h-0 bg-indigo-500 dark:bg-indigo-400 rounded-t transition-all duration-200"></div>
      <div class="visualization-bar w-0.5 h-0 bg-indigo-500 dark:bg-indigo-400 rounded-t transition-all duration-200"></div>
      <div class="visualization-bar w-0.5 h-0 bg-indigo-500 dark:bg-indigo-400 rounded-t transition-all duration-200"></div>
      <div class="visualization-bar w-0.5 h-0 bg-indigo-500 dark:bg-indigo-400 rounded-t transition-all duration-200"></div>
      <div class="visualization-bar w-0.5 h-0 bg-indigo-500 dark:bg-indigo-400 rounded-t transition-all duration-200"></div>
      <div class="visualization-bar w-0.5 h-0 bg-indigo-500 dark:bg-indigo-400 rounded-t transition-all duration-200"></div>
      <div class="visualization-bar w-0.5 h-0 bg-indigo-500 dark:bg-indigo-400 rounded-t transition-all duration-200"></div>
    </div>
  </div>
  
  <!-- Speed control - Simplified -->
  <div class="flex items-center mt-2 text-xs text-gray-600 dark:text-gray-400">
    <span class="mr-2">Speed:</span>
    <select id="playback-speed" class="bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded px-2 py-1 text-xs focus:outline-none focus:ring-1 focus:ring-indigo-500 dark:focus:ring-indigo-400">
      <option value="0.5">0.5x</option>
      <option value="0.75">0.75x</option>
      <option value="1" selected>1x</option>
      <option value="1.25">1.25x</option>
      <option value="1.5">1.5x</option>
      <option value="2">2x</option>
    </select>
  </div>
</div>
          
          <!-- Social Media Share Buttons with improved styling -->
          <div class="mt-6 sm:mt-8 pt-5 sm:pt-6 border-t border-gray-200 dark:border-gray-700">
            <div class="flex items-center mb-4">
              <div class="w-10 h-10 rounded-full bg-indigo-100 dark:bg-indigo-900/30 flex items-center justify-center mr-3">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-indigo-600 dark:text-indigo-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.368 2.684 3 3 0 00-5.368-2.684z" />
                </svg>
              </div>
              <h3 class="text-lg font-semibold text-gray-800 dark:text-gray-300">Share this Song</h3>
            </div>
          
          <div class="flex flex-wrap gap-2">
            <!-- Share buttons - Updated styling to be more consistent -->
            <a 
              id="whatsapp-share" 
              href="#" 
              class="flex items-center gap-2 bg-green-500 hover:bg-green-600 text-white px-3 py-1.5 rounded-md text-sm transition-colors"
              aria-label="Share on WhatsApp"
            >
              <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 24 24" fill="currentColor">
                <path d="M17.472 14.382c-.297-.149-1.758-.867-2.03-.967-.273-.099-.471-.148-.67.15-.197.297-.767.966-.94 1.164-.173.199-.347.223-.644.075-.297-.15-1.255-.463-2.39-1.475-.883-.788-1.48-1.761-1.653-2.059-.173-.297-.018-.458.13-.606.134-.133.298-.347.446-.52.149-.174.198-.298.298-.497.099-.198.05-.371-.025-.52-.075-.149-.669-1.612-.916-2.207-.242-.579-.487-.5-.669-.51-.173-.008-.371-.01-.57-.01-.198 0-.52.074-.792.372-.272.297-1.04 1.016-1.04 2.479 0 1.462 1.065 2.875 1.213 3.074.149.198 2.096 3.2 5.077 4.487.709.306 1.262.489 1.694.625.712.227 1.36.195 1.871.118.571-.085 1.758-.719 2.006-1.413.248-.694.248-1.289.173-1.413-.074-.124-.272-.198-.57-.347m-5.421 7.403h-.004a9.87 9.87 0 01-5.031-1.378l-.361-.214-3.741.982.998-3.648-.235-.374a9.86 9.86 0 01-1.51-5.26c.001-5.45 4.436-9.884 9.888-9.884 2.64 0 5.122 1.03 6.988 2.898a9.825 9.825 0 012.893 6.994c-.003 5.45-4.437 9.884-9.885 9.884m8.413-18.297A11.815 11.815 0 0012.05 0C5.495 0 .16 5.335.157 11.892c0 2.096.547 4.142 1.588 5.945L.057 24l6.305-1.654a11.882 11.882 0 005.683 1.448h.005c6.554 0 11.89-5.335 11.893-11.893a11.821 11.821 0 00-3.48-8.413z"/>
              </svg>
              WhatsApp
            </a>

            <a 
              id="facebook-share" 
              href="#" 
              class="flex items-center gap-2 bg-blue-600 hover:bg-blue-700 text-white px-3 py-1.5 rounded-md text-sm transition-colors"
              aria-label="Share on Facebook"
            >
              <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 24 24" fill="currentColor">
                <path d="M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z"/>
              </svg>
              Facebook
            </a>

            <a 
              id="twitter-share" 
              href="#" 
              class="flex items-center gap-2 bg-black hover:bg-gray-800 text-white px-3 py-1.5 rounded-md text-sm transition-colors"
              aria-label="Share on X"
            >
              <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 24 24" fill="currentColor">
                <path d="M18.901 1.153h3.68l-8.04 9.19L24 22.846h-7.406l-5.8-7.584-6.638 7.584H.474l8.6-9.83L0 1.154h7.594l5.243 6.932ZM17.61 20.644h2.039L6.486 3.24H4.298Z"/>
              </svg>
              
            </a>

            <a 
              id="telegram-share" 
              href="#" 
              class="flex items-center gap-2 bg-blue-500 hover:bg-blue-600 text-white px-3 py-1.5 rounded-md text-sm transition-colors"
              aria-label="Share on Telegram"
            >
              <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 24 24" fill="currentColor">
                <path d="M11.944 0A12 12 0 0 0 0 12a12 12 0 0 0 12 12 12 12 0 0 0 12-12A12 12 0 0 0 12 0a12 12 0 0 0-.056 0zm4.962 7.224c.1-.002.321.023.465.14a.506.506 0 0 1 .171.325c.016.093.036.306.02.472-.18 1.898-.96 6.502-1.36 8.627-.168.9-.499 1.201-.82 1.23-.696.065-1.225-.46-1.9-.902-1.056-.693-1.653-1.124-2.678-1.8-1.185-.78-.417-1.21.258-1.91.177-.184 3.247-2.977 3.307-3.23.007-.032.014-.15-.056-.212s-.174-.041-.249-.024c-.106.024-1.793 1.14-5.061 3.345-.48.33-.913.49-1.302.48-.428-.008-1.252-.241-1.865-.44-.752-.245-1.349-.374-1.297-.789.027-.216.325-.437.893-.663 3.498-1.524 5.83-2.529 6.998-3.014 3.332-1.386 4.025-1.627 4.476-1.635z"/>
              </svg>
              Telegram
            </a>

            <button 
              id="copy-link" 
              class="flex items-center gap-2 bg-gray-100 hover:bg-gray-200 text-gray-800 dark:bg-gray-700 dark:hover:bg-gray-600 dark:text-gray-200 px-3 py-1.5 rounded-md text-sm transition-colors"
              aria-label="Copy link"
            >
              <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1" />
              </svg>
              Copy Link
            </button>
          </div>
        </div>
      </div>

  <!-- Print button with balanced padding -->
  <div class="px-3 sm:px-4 md:px-6 pb-4 sm:pb-6">
    <button 
      id="print-song" 
      class="flex items-center gap-2 bg-gray-50 hover:bg-gray-100 dark:bg-gray-700 dark:hover:bg-gray-600 border border-gray-200 dark:border-gray-600 text-gray-700 dark:text-gray-200 px-4 py-2 rounded-md transition-colors w-full justify-center"
    >
      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 17h2a2 2 0 002-2v-4a2 2 0 00-2-2H5a2 2 0 00-2 2v4a2 2 0 002 2h2m2 4h6a2 2 0 002-2v-4a2 2 0 00-2-2H9a2 2 0 00-2 2v4a2 2 0 002 2zm8-12V5a2 2 0 00-2-2H9a2 2 0 00-2 2v4h10z" />
      </svg>
      Print Song Lyrics
    </button>
  </div>
</div>

    <!-- Footer - Updated styling -->
    <footer class="text-center text-gray-500 dark:text-gray-400 text-sm mt-8 pb-6">
      <p class="py-2 border-t border-gray-200 dark:border-gray-700">© 2025 Tamil Christian Songs | All Rights Reserved</p>
    </footer>
  </div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // Find the audio player section
  const audioSection = document.querySelector('.audio-player-section');
  
  // If no audio section is found, exit early
  if (!audioSection) return;
  
  // Get audio element and custom controls
  const audioElement = document.getElementById('audio-element');
  const playPauseBtn = document.getElementById('play-pause-btn');
  const muteBtn = document.getElementById('mute-btn');
  const seekSlider = document.getElementById('seek-slider');
  const volumeSlider = document.getElementById('volume-slider');
  const currentTimeDisplay = document.getElementById('current-time');
  const durationDisplay = document.getElementById('duration');
  const progressBar = document.getElementById('progress-bar');
  const volumeLevel = document.getElementById('volume-level');
  const playbackSpeed = document.getElementById('playback-speed');
  const playIcon = document.querySelector('.play-icon');
  const pauseIcon = document.querySelector('.pause-icon');
  const loadingIcon = document.querySelector('.loading-icon');
  const errorIcon = document.querySelector('.error-icon');
  const volumeIcon = document.querySelector('.volume-icon');
  const muteIcon = document.querySelector('.mute-icon');
  const downloadBtn = document.getElementById('audio-download-btn');
  const audioStatus = document.getElementById('audio-status');
  
  // Audio player state
  let audioLoaded = false;
  let isPlaying = false;
  let audioFileExists = true; // Flag to track if the audio file exists
  
  // Always show the audio section
  audioSection.style.display = 'block';
  
  // First, remove any existing visualizations to prevent duplicates
  const existingVisualizers = document.querySelectorAll('.audio-visualization-container');
  existingVisualizers.forEach(el => el.remove());
  
  // Remove any existing visualization bars
  const existingBars = document.querySelectorAll('.visualization-bar');
  existingBars.forEach(el => el.remove());
  
  // Create and append visualization container
  let visualizationContainer = null;
  const playerContainer = document.querySelector('.bg-gradient-to-r.from-indigo-50');
  if (playerContainer) {
    visualizationContainer = document.createElement('div');
    visualizationContainer.className = 'audio-visualization-container absolute bottom-0 left-0 right-0 pointer-events-none overflow-hidden';
    visualizationContainer.style.zIndex = '1';
    visualizationContainer.style.height = '40%'; // Reduced height to avoid overlap
    playerContainer.style.position = 'relative';
    playerContainer.appendChild(visualizationContainer);
    
    // Add CSS for visualization
    const styleElement = document.createElement('style');
    styleElement.textContent = `
      .audio-visualization-container {
        display: flex;
        align-items: flex-end;
        justify-content: space-between;
        padding: 0 8px;
        opacity: 0.2;
      }
      .visualization-bar {
        background-color: rgb(99, 102, 241);
        transition: height 0.05s ease-out;
        border-radius: 1px;
        margin: 0 1px;
        width: 3px;
      }
      .dark .visualization-bar {
        background-color: rgb(165, 180, 252);
      }
      @media (max-width: 640px) {
        .visualization-bar {
          width: 2px;
          margin: 0;
        }
      }
    `;
    document.head.appendChild(styleElement);
    
    // Create visualization bars - more bars for a denser effect
    const numberOfBars = 80; 
    for (let i = 0; i < numberOfBars; i++) {
      const bar = document.createElement('div');
      bar.className = 'visualization-bar';
      bar.style.height = '0%';
      visualizationContainer.appendChild(bar);
    }
  }
  
  // Get all visualization bars
  const visualizationBars = document.querySelectorAll('.visualization-bar');
  
  // Function to show status message
  function showStatus(message, isError = false) {
    if (audioStatus) {
      audioStatus.textContent = message;
      audioStatus.classList.remove('hidden');
      audioStatus.classList.toggle('bg-red-100', isError);
      audioStatus.classList.toggle('text-red-600', isError);
      audioStatus.classList.toggle('bg-indigo-100', !isError);
      audioStatus.classList.toggle('text-indigo-600', !isError);
      
      // Hide after a delay unless it's an error
      if (!isError) {
        setTimeout(() => {
          audioStatus.classList.add('hidden');
        }, 3000);
      }
    }
  }
  
  // Check if audio element exists
  if (!audioElement) {
    showStatus('Audio element not found', true);
    return;
  }
  
  // Check if audio source exists
  const audioSource = audioElement.querySelector('source');
  if (!audioSource || !audioSource.src) {
    showStatus('Audio source not defined', true);
    return;
  }
  
  const audioUrl = audioSource.src;
  
  // Update UI Icons based on state
  function updatePlayerIcons(state) {
    // Hide all icons first
    playIcon.classList.add('hidden');
    pauseIcon.classList.add('hidden');
    if (loadingIcon) loadingIcon.classList.add('hidden');
    if (errorIcon) errorIcon.classList.add('hidden');
    
    // Show the appropriate icon
    switch (state) {
      case 'loading':
        if (loadingIcon && audioFileExists) loadingIcon.classList.remove('hidden');
        else if (errorIcon) errorIcon.classList.remove('hidden');
        else playIcon.classList.remove('hidden');
        break;
      case 'playing':
        pauseIcon.classList.remove('hidden');
        break;
      case 'paused':
        playIcon.classList.remove('hidden');
        break;
      case 'error':
        if (errorIcon) errorIcon.classList.remove('hidden');
        else playIcon.classList.remove('hidden');
        break;
      default:
        playIcon.classList.remove('hidden');
    }
  }
  
  // Format time in minutes and seconds with error handling
  function formatTime(seconds) {
    if (isNaN(seconds) || seconds === Infinity || seconds < 0) return "0:00";
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = Math.floor(seconds % 60);
    return `${minutes}:${remainingSeconds < 10 ? '0' : ''}${remainingSeconds}`;
  }
  
  // Update all UI elements based on current audio state
  function updateUI() {
    try {
      // Update time displays with error checking
      if (!isNaN(audioElement.duration) && isFinite(audioElement.duration)) {
        currentTimeDisplay.textContent = formatTime(audioElement.currentTime);
        durationDisplay.textContent = formatTime(audioElement.duration);
        
        // Update progress bar
        const progress = (audioElement.currentTime / audioElement.duration) * 100;
        progressBar.style.width = `${progress}%`;
        seekSlider.value = progress;
      } else {
        // Handle initial state or invalid duration
        currentTimeDisplay.textContent = "0:00";
        durationDisplay.textContent = "0:00";
        progressBar.style.width = "0%";
        seekSlider.value = 0;
      }
      
      // Update play/pause button based on actual playing state
      if (audioElement.paused) {
        isPlaying = false;
        // Special handling for missing audio files
        if (!audioFileExists && errorIcon) {
          updatePlayerIcons('error');
        } else {
          updatePlayerIcons('paused');
        }
        stopVisualization();
      } else {
        isPlaying = true;
        updatePlayerIcons('playing');
        startVisualization();
      }
      
      // Update volume UI
      volumeLevel.style.width = `${audioElement.volume * 100}%`;
      volumeSlider.value = audioElement.volume * 100;
      
      // Update mute button
      if (audioElement.muted) {
        volumeIcon.classList.add('hidden');
        muteIcon.classList.remove('hidden');
      } else {
        volumeIcon.classList.remove('hidden');
        muteIcon.classList.add('hidden');
      }
    } catch (err) {
      console.error('Error updating UI:', err);
    }
  }
  
  // Improved classic audio visualization
  let visualizationInterval;
  const barValues = new Array(visualizationBars.length).fill(0);
  
  function startVisualization() {
    if (visualizationInterval) clearInterval(visualizationInterval);
    
    // Use a pattern of bar heights that resembles a classic equalizer
    // Create different patterns and cycle between them
    const patterns = [
      // Center peak
      (index, total) => {
        const center = total / 2;
        const distance = Math.abs(index - center);
        const maxDistance = total / 2;
        return Math.max(5, 80 - (distance / maxDistance * 75)); // Reduced max height
      },
      // Dual peaks
      (index, total) => {
        const firstPeak = total / 3;
        const secondPeak = (total * 2) / 3;
        const distance = Math.min(Math.abs(index - firstPeak), Math.abs(index - secondPeak));
        const maxDistance = total / 6;
        return Math.max(10, 75 - (distance / maxDistance * 65)); // Reduced max height
      },
      // Triple peaks
      (index, total) => {
        const firstPeak = total / 4;
        const secondPeak = total / 2;
        const thirdPeak = (total * 3) / 4;
        const distance = Math.min(
          Math.abs(index - firstPeak),
          Math.abs(index - secondPeak),
          Math.abs(index - thirdPeak)
        );
        const maxDistance = total / 8;
        return Math.max(5, 70 - (distance / maxDistance * 65)); // Reduced max height
      },
      // Random with smoothing
      (index, total) => {
        return Math.random() * 60 + 5; // Reduced max height
      }
    ];
    
    // Use a mix of patterns and smoothly transition between them
    let currentPatternIndex = 0;
    const total = visualizationBars.length;
    
    // Smoothing factor for transitions
    const smoothing = 0.3;
    
    // Continuous animation with pattern changes
    visualizationInterval = setInterval(() => {
      // Choose pattern and occasionally switch
      if (Math.random() < 0.02) { // 2% chance to change pattern
        currentPatternIndex = (currentPatternIndex + 1) % patterns.length;
      }
      
      // Apply the current pattern with randomness and smooth transitions
      visualizationBars.forEach((bar, index) => {
        const patternValue = patterns[currentPatternIndex](index, total);
        
        // Add randomness based on position (more in the middle, less at edges)
        const randomFactor = Math.random() * 15 - 7.5; // -7.5 to +7.5 (reduced randomness)
        
        // Target height with randomness, clamped to a reasonable range
        const targetHeight = Math.max(2, Math.min(80, patternValue + randomFactor)); // Reduced max height
        
        // Smooth transition to new height
        barValues[index] = barValues[index] * (1 - smoothing) + targetHeight * smoothing;
        
        // Apply height
        bar.style.height = `${barValues[index]}%`;
      });
    }, 80); // Update frequently for smooth animation
  }
  
  function stopVisualization() {
    if (visualizationInterval) {
      clearInterval(visualizationInterval);
      visualizationInterval = null;
    }
    
    // Gradually reduce heights for a fadeout effect
    let reduction = 1.0;
    const fadeInterval = setInterval(() => {
      reduction *= 0.85; // Reduce by 15% each step
      
      visualizationBars.forEach((bar, index) => {
        barValues[index] *= reduction;
        bar.style.height = `${barValues[index]}%`;
      });
      
      if (reduction < 0.01) {
        clearInterval(fadeInterval);
        // Reset all bars to zero
        visualizationBars.forEach((bar, index) => {
          barValues[index] = 0;
          bar.style.height = '0%';
        });
      }
    }, 50);
  }
  
  // Play function with robust error handling
  function playAudio() {
    if (!audioElement) return;
    
    // If we already know the file doesn't exist, don't attempt to play
    if (!audioFileExists) {
      showStatus('Audio file not available', true);
      updatePlayerIcons('error');
      return;
    }
    
    // Don't attempt to play if already playing
    if (!audioElement.paused) return;
    
    if (!audioLoaded) {
      showStatus('Loading audio...');
    }
    
    // Show loading state
    updatePlayerIcons('loading');
    
    // Attempt to play with complete error handling
    const playPromise = audioElement.play();
    
    // Modern browsers return a promise from play()
    if (playPromise !== undefined) {
      playPromise
        .then(() => {
          // Playback started successfully
          audioLoaded = true;
          updatePlayerIcons('playing');
          showStatus('Playing');
          isPlaying = true;
        })
        .catch(error => {
          console.error('Play failed:', error);
          handlePlaybackError(error);
        });
    } else {
      // Fallback for older browsers
      if (audioElement.error) {
        handlePlaybackError(audioElement.error);
      } else {
        updatePlayerIcons('playing');
        isPlaying = true;
      }
    }
  }
  
  // Handle various playback errors
  function handlePlaybackError(error) {
    console.error('Audio playback error:', error);
    
    let errorMessage = 'Unable to play audio';
    
    // Show appropriate error message based on the error
    if (error.name === 'NotAllowedError') {
      errorMessage = 'Playback not allowed. User interaction required.';
    } else if (error.name === 'NotSupportedError') {
      errorMessage = 'Audio format not supported by your browser.';
    } else if (error.name === 'AbortError') {
      errorMessage = 'Playback aborted.';
    } else if (error.name === 'NetworkError' || error.code === 2) {
      errorMessage = 'Audio file not available.';
      audioFileExists = false; // Mark as not existing on network error
    } else if (error.code === 3) {
      errorMessage = 'Audio decoding failed.';
    } else if (error.code === 4) {
      errorMessage = 'Audio file not available.';
      audioFileExists = false; // Mark as not existing on file not found
    }
    
    showStatus(errorMessage, true);
    updatePlayerIcons('error');
    isPlaying = false;
  }
  
  // Pause audio with error handling
  function pauseAudio() {
    try {
      audioElement.pause();
      isPlaying = false;
      updatePlayerIcons('paused');
      showStatus('Paused');
    } catch (err) {
      console.error('Error pausing audio:', err);
    }
  }
  
  // Toggle play/pause with proper state handling
  function togglePlayPause() {
    if (isPlaying) {
      pauseAudio();
    } else {
      playAudio();
    }
    updateUI();
  }
  
  // Initialize the audio player with robust loading
  function initializeAudioPlayer() {
    // Check if audio is available
    if (audioElement.readyState >= 2) {  // HAVE_CURRENT_DATA or higher
      audioLoaded = true;
      updateUI();
      showStatus('Audio ready');
    }
    
    // Set initial volume
    try {
      audioElement.volume = 1.0;
      volumeSlider.value = 100;
      volumeLevel.style.width = '100%';
    } catch (err) {
      console.error('Error setting initial volume:', err);
    }
    
    // Ensure playback rate is set correctly
    try {
      audioElement.playbackRate = 1.0;
      playbackSpeed.value = "1";
    } catch (err) {
      console.error('Error setting playback rate:', err);
    }
  }
  
  // EVENT LISTENERS - With error handling for all events
  
  // Play/Pause button
  if (playPauseBtn) {
    playPauseBtn.addEventListener('click', function(e) {
      e.preventDefault();
      togglePlayPause();
    });
  }
  
  // Mute button
  if (muteBtn) {
    muteBtn.addEventListener('click', function(e) {
      e.preventDefault();
      try {
        audioElement.muted = !audioElement.muted;
        updateUI();
      } catch (err) {
        console.error('Error toggling mute:', err);
      }
    });
  }
  
  // Seek slider
  if (seekSlider) {
    seekSlider.addEventListener('input', function() {
      try {
        // Don't allow seeking if file doesn't exist
        if (!audioFileExists) return;
        
        const seekTime = (audioElement.duration * seekSlider.value) / 100;
        if (!isNaN(seekTime) && isFinite(seekTime)) {
          audioElement.currentTime = seekTime;
          updateUI();
        }
      } catch (err) {
        console.error('Error seeking:', err);
      }
    });
  }
  
  // Volume slider
  if (volumeSlider) {
    volumeSlider.addEventListener('input', function() {
      try {
        const volume = volumeSlider.value / 100;
        audioElement.volume = volume;
        audioElement.muted = false;
        updateUI();
      } catch (err) {
        console.error('Error adjusting volume:', err);
      }
    });
  }
  
  // Playback speed
  if (playbackSpeed) {
    playbackSpeed.addEventListener('change', function() {
      try {
        // Don't allow speed change if file doesn't exist
        if (!audioFileExists) return;
        
        const speed = parseFloat(playbackSpeed.value);
        if (!isNaN(speed)) {
          audioElement.playbackRate = speed;
        }
      } catch (err) {
        console.error('Error changing playback speed:', err);
      }
    });
  }
  
  // AUDIO ELEMENT EVENTS
  
  // Update UI when audio time updates
  audioElement.addEventListener('timeupdate', function() {
    updateUI();
  });
  
  // When metadata loaded
  audioElement.addEventListener('loadedmetadata', function() {
    audioLoaded = true;
    updateUI();
    showStatus('Audio metadata loaded');
  });
  
  // When audio can play
  audioElement.addEventListener('canplay', function() {
    audioLoaded = true;
    audioFileExists = true; // File definitely exists if we can play it
    updateUI();
    showStatus('Audio ready to play');
  });
  
  // When audio playback ends
  audioElement.addEventListener('ended', function() {
    isPlaying = false;
    updatePlayerIcons('paused');
    stopVisualization();
    showStatus('Playback ended');
    
    // Reset to beginning
    audioElement.currentTime = 0;
    updateUI();
  });
  
  // Handle errors
  audioElement.addEventListener('error', function(e) {
    const error = audioElement.error;
    if (error && error.code === 4) {
      // Media not found error
      audioFileExists = false;
    }
    handlePlaybackError(error || { message: 'Unknown audio error' });
  });
  
  // Check if audio file is available
  fetch(audioUrl, { method: 'HEAD' })
    .then(response => {
      if (response.ok) {
        // File exists, initialize the player normally
        audioFileExists = true;
        initializeAudioPlayer();
        
        // Set download link if available
        if (downloadBtn) {
          downloadBtn.classList.remove('hidden');
          const downloadLink = downloadBtn.querySelector('a');
          if (downloadLink) downloadLink.href = audioUrl;
        }
      } else {
        // File not found, mark as not existing
        audioFileExists = false;
        console.log('Audio file not found');
        showStatus('Audio file not available', true);
        updatePlayerIcons('error');
        
        // Still initialize the player with basic UI
        initializeAudioPlayer();
      }
    })
    .catch(error => {
      // Network error or CORS issue
      console.log('Network error checking audio file:', error);
      showStatus('Audio file not available', true);
      updatePlayerIcons('error');
      
      // Still initialize the player with basic UI
      initializeAudioPlayer();
    });
  
  // Initialize the player
  initializeAudioPlayer();
});

document.addEventListener('DOMContentLoaded', function() {
  // Initialize all functionality
  initializeSharing();
  setupPrintFunctionality();
  setupLanguageSwitching();
  highlightSearchTerm();
  updateSearchParamOnLinks();
});

// Social media sharing functionality
function initializeSharing() {
  // Get the song title and ID
  const titleElement = document.querySelector('h1');
  const songTitle = titleElement ? titleElement.textContent.trim() : "Song Title";
  
  // Extract the song ID from the title or data attribute
  let songId = "";
  const songContainer = document.querySelector('[data-song-id]');
  if (songContainer) {
    songId = songContainer.dataset.songId;
  } else if (songTitle.includes(':')) {
    songId = songTitle.split(':')[0].trim();
  }
  
  // Current URL
  const url = window.location.href;
  
  // Create share text
  const shareText = `${songId ? songId + ': ' : ''}${songTitle.replace(/^[^:]+:\s*/, '')} - Tamil Christian Songs`;
  
  // WhatsApp share
  const whatsappBtn = document.getElementById('whatsapp-share');
  if (whatsappBtn) {
    whatsappBtn.addEventListener('click', function(e) {
      e.preventDefault();
      const whatsappUrl = `https://wa.me/?text=${encodeURIComponent(shareText + ': ' + url)}`;
      window.open(whatsappUrl, '_blank');
    });
  }
  
  // Facebook share
  const facebookBtn = document.getElementById('facebook-share');
  if (facebookBtn) {
    facebookBtn.addEventListener('click', function(e) {
      e.preventDefault();
      const facebookUrl = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(url)}`;
      window.open(facebookUrl, '_blank');
    });
  }
  
  // Twitter/X share
  const twitterBtn = document.getElementById('twitter-share');
  if (twitterBtn) {
    twitterBtn.addEventListener('click', function(e) {
      e.preventDefault();
      const twitterUrl = `https://twitter.com/intent/tweet?text=${encodeURIComponent(shareText)}&url=${encodeURIComponent(url)}`;
      window.open(twitterUrl, '_blank');
    });
  }
  
  // Telegram share
  const telegramBtn = document.getElementById('telegram-share');
  if (telegramBtn) {
    telegramBtn.addEventListener('click', function(e) {
      e.preventDefault();
      const telegramUrl = `https://t.me/share/url?url=${encodeURIComponent(url)}&text=${encodeURIComponent(shareText)}`;
      window.open(telegramUrl, '_blank');
    });
  }
  
  // Copy link functionality with updated styling
  const copyLinkBtn = document.getElementById('copy-link');
  if (copyLinkBtn) {
    copyLinkBtn.addEventListener('click', function() {
      try {
        // Use modern clipboard API if available
        if (navigator.clipboard && navigator.clipboard.writeText) {
          navigator.clipboard.writeText(url)
            .then(() => showCopiedFeedback(this))
            .catch(err => {
              console.error('Failed to copy:', err);
              fallbackCopyLink(this, url);
            });
        } else {
          fallbackCopyLink(this, url);
        }
      } catch (error) {
        console.error('Copy error:', error);
        fallbackCopyLink(this, url);
      }
    });
  }
}

// Fallback method for copying link
function fallbackCopyLink(button, text) {
  // Create a temporary input element
  const tempInput = document.createElement('input');
  tempInput.value = text;
  document.body.appendChild(tempInput);
  
  // Select and copy the link
  tempInput.select();
  document.execCommand('copy');
  
  // Remove the temporary element
  document.body.removeChild(tempInput);
  
  // Show feedback
  showCopiedFeedback(button);
}

// Shows "Copied!" feedback on button
function showCopiedFeedback(button) {
  const originalText = button.innerHTML;
  
  // Updated design for the "Copied!" feedback
  button.innerHTML = `
    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-green-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
    </svg>
    <span>Copied!</span>
  `;
  
  // Add a temporary success class
  button.classList.add('bg-green-50', 'dark:bg-green-900/20', 'text-green-700', 'dark:text-green-300', 'border-green-200', 'dark:border-green-800');
  
  // Reset button after 2 seconds
  setTimeout(() => {
    button.innerHTML = originalText;
    button.classList.remove('bg-green-50', 'dark:bg-green-900/20', 'text-green-700', 'dark:text-green-300', 'border-green-200', 'dark:border-green-800');
  }, 2000);
}

// Enhanced Printing Functionality with Fixed Content Generation
function setupPrintFunctionality() {
  const printButton = document.getElementById('print-song');
  if (!printButton) return;
  
  printButton.addEventListener('click', function() {
    try {
      // Comprehensive song data extraction with robust fallback mechanisms
      const extractSongData = () => {
        // Title extraction
        const titleElement = document.querySelector('h1');
        const fullTitle = titleElement ? titleElement.textContent.trim() : "Untitled Song";
        
        // Song ID extraction with multiple fallback strategies
        let songId = "";
        const songContainer = document.querySelector('[data-song-id]');
        if (songContainer) {
          songId = songContainer.dataset.songId;
        } else if (fullTitle.includes(':')) {
          songId = fullTitle.split(':')[0].trim();
        }
        
        // Clean title (remove song ID if present)
        const cleanTitle = fullTitle.replace(/^[^:]+:\s*/, '');
        
        // Lyrics extraction
        const firstPre = document.querySelector('pre');
        const songText = firstPre ? firstPre.textContent.trim() : "Lyrics not available";
        
        // Original version extraction
        let originalTitle = "";
        let originalText = "";
        const originalSection = document.querySelector('.mt-8.pt-6');
        if (originalSection) {
          const titleEl = originalSection.querySelector('h4');
          const originalPre = originalSection.querySelector('pre');
          
          originalTitle = titleEl ? titleEl.textContent.trim() : "";
          originalText = originalPre ? originalPre.textContent.trim() : "";
        }
        
        return { songId, fullTitle, cleanTitle, songText, originalTitle, originalText };
      };
      
      // Get song data
      const { songId, fullTitle, cleanTitle, songText, originalTitle, originalText } = extractSongData();
      
      // Create HTML for the new window with balanced styling
      const printHTML = `
        <!DOCTYPE html>
        <html lang="en">
        <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>${cleanTitle} - Print Version</title>
          <style>
            @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;600;700&display=swap');
            
            :root {
              --primary-color: #1e40af;
              --secondary-color: #4338ca;
              --background-light: #f9fafb;
              --text-dark: #1f2937;
              --border-color: #e5e7eb;
            }
            
            * {
              margin: 0;
              padding: 0;
              box-sizing: border-box;
            }
            
            @page {
              margin: 0.4in;
              size: letter;
            }
            
            html, body {
              height: 100%;
              margin: 0;
              padding: 0;
            }
            
            body {
              font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
              line-height: 1.5;
              color: var(--text-dark);
              max-width: 800px;
              margin: 0 auto;
              padding: 15px;
              background: white;
              display: flex;
              flex-direction: column;
              min-height: 100vh;
              font-size: 15px;
            }
            
            .print-container {
              flex-grow: 1;
              display: flex;
              flex-direction: column;
            }
            
            .print-header {
              text-align: center;
              padding-bottom: 15px;
              border-bottom: 1px solid var(--border-color);
              margin-bottom: 15px;
            }
            
            .song-id {
              display: inline-block;
              background-color: #f3f4f6;
              color: var(--primary-color);
              font-weight: bold;
              padding: 3px 10px;
              border-radius: 5px;
              margin-right: 8px;
            }
            
            h1 {
              font-size: 24px;
              margin: 0 0 8px 0;
              color: var(--primary-color);
            }
            
            .song-details {
              margin-bottom: 15px;
              font-size: 12px;
              color: #6b7280;
            }
            
            .lyrics-container {
              background-color: var(--background-light);
              border-radius: 7px;
              padding: 15px;
              margin-bottom: 15px;
              white-space: pre-line;
              border: 1px solid var(--border-color);
            }
            
            .original-title {
              font-weight: 600;
              font-size: 17px;
              margin: 15px 0 8px 0;
              padding-top: 15px;
              border-top: 1px solid var(--border-color);
              color: var(--primary-color);
            }
            
            .footer {
              text-align: center;
              font-size: 11px;
              color: #6b7280;
              margin-top: auto;
              padding-top: 15px;
              border-top: 1px solid var(--border-color);
            }
            
            .copyright {
              text-align: center;
              font-size: 11px;
              color: #6b7280;
              margin-top: 15px;
            }
            
            @media print {
              body {
                padding: 0;
              }
              
              .print-container {
                padding: 0.4in;
              }
              
              .no-print {
                display: none;
              }
            }
          </style>
        </head>
        <body>
          <div class="print-container">
            <div class="print-header">
              <h1>
                ${songId ? `<span class="song-id">${songId}</span>` : ''}
                ${cleanTitle}
              </h1>
              <div class="song-details">
                Tamil Christian Songs | Printed on ${new Date().toLocaleDateString()}
              </div>
            </div>
            
            <div class="lyrics-container">
              ${songText.replace(/\n\n\n+/g, '\n\n')}
            </div>
            
            ${originalTitle && originalText ? `
              <h2 class="original-title">Original Tamil Version: ${originalTitle}</h2>
              <div class="lyrics-container">
                ${originalText.replace(/\n\n\n+/g, '\n\n')}
              </div>
            ` : ''}
            
            <div class="footer">
              <div class="copyright">
                © Tamil Christian Songs
              </div>
            </div>
          </div>
        </body>
        </html>
      `;
      
      // Open a new window and write the content
      const printWindow = window.open('', 'PrintSong', 'width=800,height=600');
      if (!printWindow) {
        alert("Please allow pop-ups to print this song.");
        return;
      }
      
      // Ensure the window is fully loaded before writing content
      printWindow.document.open();
      printWindow.document.write(printHTML);
      printWindow.document.close();
      
      // Focus the new window
      printWindow.focus();
      
      // Automatically open the print dialog after a short delay to ensure content is rendered
      setTimeout(() => {
        printWindow.print();
        // Don't close the window after printing to allow users to try again if needed
      }, 800);
    } catch (error) {
      console.error("Error in print function:", error);
      alert("Sorry, there was a problem preparing the song for printing. Please try again.");
    }
  });
}

// Make sure this function runs when the DOM is fully loaded
document.addEventListener('DOMContentLoaded', setupPrintFunctionality);

// Centralized language switching function
function setupLanguageSwitching() {
  const languageSelect = document.getElementById('language-select');
  if (!languageSelect) return;
  
  languageSelect.addEventListener('change', (e) => {
    const selectedLang = e.target.value;
    switchLanguage(selectedLang);
  });
}

function switchLanguage(selectedLang) {
  // Get the current URL path
  const currentPath = window.location.pathname;
  const pathParts = currentPath.split('/');
  
  // Try to extract the song ID from the path
  let songId = '';
  
  // Look for the song ID in different possible locations
  if (pathParts.length > 0) {
    // First try: assume it's the last part of the path
    songId = pathParts[pathParts.length - 1];
    
    // Validation: Check if songId is actually a numeric ID
    if (!/^\d+$/.test(songId)) {
      // If not numeric, try another approach: look for patterns in the path
      const songsIndex = pathParts.indexOf('songs');
      if (songsIndex >= 0 && songsIndex + 2 < pathParts.length) {
        // Format should be /songs/{lang}/{id}
        songId = pathParts[songsIndex + 2];
      } else {
        // If we still can't find it, check if the song ID is available in the page content
        const songIdElement = document.querySelector('[data-song-id]');
        if (songIdElement) {
          songId = songIdElement.dataset.songId;
        } else {
          console.error('Could not determine song ID. Redirecting to home page.');
          window.location.href = 'https://songs.c-g-m.eu';
          return;
        }
      }
    }
  }
  
  // Construct the new URL, preserving any query parameters
  const queryString = window.location.search;
  const newUrl = `https://songs.c-g-m.eu/songs/${selectedLang}/${songId}${queryString}`;
  
  // Save language preference
  sessionStorage.setItem('selectedLanguage', selectedLang);
  
  // Navigate to the new URL
  window.location.href = newUrl;
}

// Enhanced Search Highlighting Function

// Main highlighting function
function highlightSearchTerm() {
  // Get search query from URL parameters or sessionStorage
  const urlParams = new URLSearchParams(window.location.search);
  const searchQuery = urlParams.get('q') || sessionStorage.getItem('searchQuery');
  
  if (!searchQuery || searchQuery.trim() === '') return;
  
  // Split search query into individual words for multi-word matching
  const searchWords = searchQuery.trim().split(/\s+/).filter(word => word.length > 1);
  const isMultiWordSearch = searchWords.length > 1;
  
  // Function to safely highlight text nodes without breaking HTML structure
  function highlightTextNodes(element, searchTerms) {
    if (!element || !searchTerms || (Array.isArray(searchTerms) && searchTerms.length === 0)) return;
    
    // Handle both single term and array of terms
    const terms = Array.isArray(searchTerms) ? searchTerms : [searchTerms];
    
    // Process only element nodes (skip text outside elements)
    if (element.nodeType === Node.ELEMENT_NODE) {
      // Skip certain elements that shouldn't be highlighted
      if (['SCRIPT', 'STYLE', 'MARK', 'CODE', 'BUTTON', 'SELECT', 'OPTION'].includes(element.tagName)) {
        return;
      }
      
      // Process child nodes recursively
      const childNodes = [...element.childNodes]; // Create a copy to avoid live collection issues
      
      childNodes.forEach(child => {
        if (child.nodeType === Node.TEXT_NODE) {
          // This is a text node, check for matches
          const text = child.textContent;
          let hasMatch = false;
          
          // Check if any term matches
          for (const term of terms) {
            if (term.trim() === '') continue;
            
            const searchRegex = new RegExp(term.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&'), 'gi');
            if (searchRegex.test(text)) {
              hasMatch = true;
              break;
            }
          }
          
          if (hasMatch) {
            // Found a match in text node, replace with highlighted version
            const frag = document.createDocumentFragment();
            
            let processedText = text;
            
            // Apply highlighting for each term
            for (const term of terms) {
              if (term.trim() === '') continue;
              
              const searchRegex = new RegExp(term.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&'), 'gi');
              
              // Create a temporary div to hold the processed HTML
              const tempDiv = document.createElement('div');
              
              // Replace matches with marked spans
              tempDiv.innerHTML = processedText.replace(searchRegex, match => 
                `<mark class="bg-yellow-300 text-gray-900 dark:bg-yellow-500/60 dark:text-gray-900 px-1 py-0.5 rounded-sm font-medium">${match}</mark>`
              );
              
              // Get the processed HTML result
              processedText = tempDiv.innerHTML;
            }
            
            // Create a temporary container
            const tempContainer = document.createElement('div');
            tempContainer.innerHTML = processedText;
            
            // Append all child nodes to our fragment
            while (tempContainer.firstChild) {
              frag.appendChild(tempContainer.firstChild);
            }
            
            // Replace the original text node with our fragment
            element.replaceChild(frag, child);
          }
        } else {
          // This is an element node, recurse into it
          highlightTextNodes(child, searchTerms);
        }
      });
    }
  }
  
  // Areas to search for the query
  const searchAreas = [
    document.querySelector('h1'), // Song title
    ...document.querySelectorAll('pre') // Song lyrics
  ];
  
  // Perform highlighting - use either full query or individual words based on search type
  let highlightCount = 0;
  
  searchAreas.forEach(element => {
    if (element) {
      // Store the original innerHTML for potential reset
      if (!element.dataset.originalContent) {
        element.dataset.originalContent = element.innerHTML;
      }
      
      // Apply highlighting with either full phrase or individual words
      if (isMultiWordSearch) {
        // Try exact phrase first
        const exactMatches = countMatches(element.textContent, searchQuery);
        
        if (exactMatches > 0) {
          // Found exact phrase matches, highlight those
          highlightTextNodes(element, searchQuery);
          highlightCount += exactMatches;
        } else {
          // No exact phrase match, check for individual words
          highlightTextNodes(element, searchWords);
          
          // Count individual word matches
          searchWords.forEach(word => {
            highlightCount += countMatches(element.textContent, word);
          });
        }
      } else {
        // Single word search
        highlightTextNodes(element, searchQuery);
        highlightCount += countMatches(element.textContent, searchQuery);
      }
    }
  });
  
  // Add a search badge if matches were found
  if (highlightCount > 0) {
    addSearchBadge(searchQuery, highlightCount, isMultiWordSearch);
  }
}

// Helper function to count matches of a term in text
function countMatches(text, term) {
  if (!text || !term) return 0;
  
  const regex = new RegExp(term.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&'), 'gi');
  const matches = text.match(regex);
  return matches ? matches.length : 0;
}

// Function to add the search badge with improved navigation controls
function addSearchBadge(searchQuery, highlightCount, isMultiWordSearch) {
  // Remove any existing search badge
  const existingBadge = document.getElementById('search-highlight-badge');
  if (existingBadge) {
    existingBadge.remove();
  }
  
  // Create the search badge with improved navigation
  const searchBadge = document.createElement('div');
  searchBadge.id = 'search-highlight-badge';
  searchBadge.className = 'mb-6 flex flex-wrap items-center gap-3 text-sm bg-indigo-50 dark:bg-indigo-900/30 px-4 py-3 rounded-lg border border-indigo-100 dark:border-indigo-800 shadow-sm';
  
  // For multi-word searches, add a proper explanation of what was matched
  let matchTypeText = '';
  if (isMultiWordSearch) {
    const searchWords = searchQuery.trim().split(/\s+/).filter(word => word.length > 1);
    matchTypeText = `<div class="text-gray-600 dark:text-gray-400 text-xs mt-1">
      ${searchWords.length} words being searched: 
      ${searchWords.map(word => `<span class="px-1.5 py-0.5 bg-gray-100 dark:bg-gray-700 rounded-md text-xs font-medium">${escapeHTML(word)}</span>`).join(' ')}
    </div>`;
  }
  
  searchBadge.innerHTML = `
    <div class="flex-1">
      <div class="flex items-center gap-2">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-indigo-600 dark:text-indigo-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
        </svg>
        <span class="text-gray-800 dark:text-gray-200 font-medium">Showing results for "<span class="font-semibold text-indigo-700 dark:text-indigo-300">${escapeHTML(searchQuery)}</span>"</span>
      </div>
      ${matchTypeText}
    </div>
    
    <div class="flex items-center gap-3">
      <span id="highlightCounter" class="bg-indigo-200 dark:bg-indigo-700 text-indigo-800 dark:text-indigo-200 px-2.5 py-1 rounded-md text-sm font-medium min-w-[70px] text-center">
        ${highlightCount} match${highlightCount !== 1 ? 'es' : ''}
      </span>
      
      <div class="flex bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-md shadow-sm">
        <button id="prevHighlight" class="flex items-center justify-center h-8 w-8 rounded-l-md hover:bg-gray-100 dark:hover:bg-gray-700 text-gray-700 dark:text-gray-300 border-r border-gray-200 dark:border-gray-700 transition-colors" title="Previous match (Shift+F3)">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
          </svg>
        </button>
        <button id="nextHighlight" class="flex items-center justify-center h-8 w-8 hover:bg-gray-100 dark:hover:bg-gray-700 text-gray-700 dark:text-gray-300 border-r border-gray-200 dark:border-gray-700 transition-colors" title="Next match (F3)">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
          </svg>
        </button>
        <button id="clearHighlights" class="flex items-center justify-center h-8 w-8 rounded-r-md hover:bg-gray-100 dark:hover:bg-gray-700 text-gray-700 dark:text-gray-300 transition-colors" title="Clear highlights (Esc)">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>
    </div>
  `;
  
  // Insert the badge at the beginning of the main content
  const songContent = document.querySelector('.p-5.sm\\:p-8');
  if (songContent) {
    songContent.insertBefore(searchBadge, songContent.firstChild);
  } else {
    // Fallback - look for any suitable container
    const mainContent = document.querySelector('main');
    if (mainContent) {
      mainContent.insertBefore(searchBadge, mainContent.firstChild);
    }
  }
  
  // Set up the highlight navigation system
  setupHighlightNavigation();
}

// Update the search parameter propagation function
// Update the search parameter propagation function
function updateSearchParamOnLinks() {
  const urlParams = new URLSearchParams(window.location.search);
  const searchQuery = urlParams.get('q');
  
  if (searchQuery) {
    // Store in session storage for persistence across pages
    sessionStorage.setItem('searchQuery', searchQuery);
    
    // Also store search terms for multi-word searches
    const searchWords = searchQuery.trim().split(/\s+/).filter(word => word.length > 1);
    if (searchWords.length > 1) {
      sessionStorage.setItem('searchWords', JSON.stringify(searchWords));
    }
    
    // Update language switcher to preserve search parameter
    const languageSelect = document.getElementById('language-select');
    if (languageSelect) {
      languageSelect.addEventListener('change', (e) => {
        const selectedLang = e.target.value;
        
        // Get the current URL path components
        const currentPath = window.location.pathname;
        const pathParts = currentPath.split('/');
        
        // Extract song ID - handle different path formats
        let songId = '';
        if (pathParts.length > 0) {
          // Try the last part of the path first
          songId = pathParts[pathParts.length - 1];
          
          // Check if it looks like a song ID
          if (!/^\d+$/.test(songId)) {
            // Try finding it through path pattern
            const songsIndex = pathParts.indexOf('songs');
            if (songsIndex >= 0 && songsIndex + 2 < pathParts.length) {
              songId = pathParts[songsIndex + 2];
            } else {
              // Last resort: check data attribute
              const songElement = document.querySelector('[data-song-id]');
              if (songElement) {
                songId = songElement.dataset.songId;
              }
            }
          }
        }
        
        if (!songId) {
          console.error('Could not determine song ID');
          return;
        }
        
        // Build the new URL with search parameters preserved
        const newUrl = `https://songs.c-g-m.eu/songs/${selectedLang}/${songId}?q=${encodeURIComponent(searchQuery)}`;
        
        // Navigate to the new URL
        window.location.href = newUrl;
        
        // Prevent default handling
        e.preventDefault();
      });
    }
  }
}

// Function to set up highlight navigation with improved visibility
function setupHighlightNavigation() {
  let currentHighlightIndex = -1;
  const highlights = document.querySelectorAll('mark');
  
  // Update the counter text
  function updateCounter() {
    const counter = document.getElementById('highlightCounter');
    if (counter && highlights.length > 0) {
      counter.textContent = `${currentHighlightIndex + 1} of ${highlights.length}`;
    }
  }
  
  // Navigate to a specific highlight with improved visibility
  function navigateToHighlight(index) {
    if (highlights.length === 0) return;
    
    // Remove current active highlight effect from all
    highlights.forEach(h => {
      h.classList.remove('ring', 'ring-offset-2', 'ring-indigo-500', 'dark:ring-indigo-400', 'ring-offset-white', 'dark:ring-offset-gray-800', 'animate-pulse');
    });
    
    // Update index with wrapping
    currentHighlightIndex = (index + highlights.length) % highlights.length;
    
    // Apply enhanced highlight effect
    const currentHighlight = highlights[currentHighlightIndex];
    currentHighlight.classList.add('ring', 'ring-offset-2', 'ring-indigo-500', 'dark:ring-indigo-400', 'ring-offset-white', 'dark:ring-offset-gray-800');
    
    // Add a brief pulse animation
    currentHighlight.classList.add('animate-pulse');
    setTimeout(() => {
      currentHighlight.classList.remove('animate-pulse');
    }, 1000);
    
    // Smooth scroll with offset for header and better positioning
    const headerHeight = document.querySelector('header')?.offsetHeight || 0;
    const elementRect = currentHighlight.getBoundingClientRect();
    const absoluteElementTop = elementRect.top + window.pageYOffset;
    const middle = absoluteElementTop - (window.innerHeight / 3); // Position in the upper third
    
    window.scrollTo({
      top: middle - headerHeight - 20, // Add extra padding
      behavior: 'smooth'
    });
    
    updateCounter();
  }
  
  // Navigate to the next or previous highlight
  function navigateHighlights(direction) {
    navigateToHighlight(currentHighlightIndex + direction);
  }
  
  // Clear all highlights
  function clearHighlights() {
    // Restore original content to elements with highlights
    document.querySelectorAll('[data-original-content]').forEach(element => {
      element.innerHTML = element.dataset.originalContent;
      delete element.dataset.originalContent;
    });
    
    // Remove the search badge
    const searchBadge = document.getElementById('search-highlight-badge');
    if (searchBadge) {
      searchBadge.remove();
    }
    
    // Clear the search query parameter
    const url = new URL(window.location);
    url.searchParams.delete('q');
    window.history.replaceState({}, '', url);
    sessionStorage.removeItem('searchQuery');
    sessionStorage.removeItem('searchWords');
  }
  
  // Set up event listeners for the navigation buttons
  document.getElementById('prevHighlight')?.addEventListener('click', () => navigateHighlights(-1));
  document.getElementById('nextHighlight')?.addEventListener('click', () => navigateHighlights(1));
  document.getElementById('clearHighlights')?.addEventListener('click', clearHighlights);
  
  // Set up keyboard shortcuts
  document.addEventListener('keydown', (e) => {
    if (e.key === 'F3' || (e.ctrlKey && e.key === 'g')) {
      e.preventDefault();
      navigateHighlights(1);
    } else if ((e.shiftKey && e.key === 'F3') || (e.ctrlKey && e.shiftKey && e.key === 'g')) {
      e.preventDefault();
      navigateHighlights(-1);
    } else if (e.key === 'Escape') {
      const clearButton = document.getElementById('clearHighlights');
      if (clearButton) {
        clearButton.click();
      }
    }
  });
  
  // Start by highlighting the first match
  if (highlights.length > 0) {
    navigateToHighlight(0);
  }
}

// Helper function to safely escape HTML for display
function escapeHTML(str) {
  return str
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;')
    .replace(/'/g, '&#039;');
}

// Create and add CSS animation styles for highlights
function addHighlightStyles() {
  const styleElement = document.createElement('style');
  styleElement.textContent = `
    @keyframes highlightPulse {
      0% { box-shadow: 0 0 0 0 rgba(99, 102, 241, 0.7); }
      70% { box-shadow: 0 0 0 6px rgba(99, 102, 241, 0); }
      100% { box-shadow: 0 0 0 0 rgba(99, 102, 241, 0); }
    }
    
    .highlight-pulse {
      animation: highlightPulse 1.5s ease-out;
    }
    
    mark {
      transition: all 0.2s ease-in-out;
    }
    
    mark.current {
      transform: scale(1.05);
    }
  `;
  document.head.appendChild(styleElement);
}

// Initialize everything when document is ready
document.addEventListener('DOMContentLoaded', () => {
  addHighlightStyles();
  highlightSearchTerm();
  updateSearchParamOnLinks();
});
</script>
<!-- Completely revised print container and function -->
<div id="print-container" style="display:none;"></div>

  </body>
</html>

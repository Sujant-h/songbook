---
import '../../../styles/global.css';
import songsData from '../../../data/data_cleaned.json';
import { pwaInfo } from 'virtual:pwa-info';

export interface Props {
  title: string;
}

const { title } = Astro.props as Props;

export async function getStaticPaths() {
  const langs = ['ta', 'en', 'de'];
  const paths = [];
  
  langs.forEach(lang => {
    songsData.forEach(song => {
      paths.push({
        params: { lang, id: song.id },
        props: { song, lang },
      });
    });
  });
  
  return paths;
}

const { song, lang } = Astro.props;
const audioUrl = `https://sujant-h.github.io/songbook/audio/${song.id}.mp3`;

// Select content based on language
let songTitle = song.title;
let songText = song.text;
let showOriginal = false;

if (lang === 'en') {
  songTitle = song.title_en || song.title;
  songText = song.text_en || song.text;
  showOriginal = true;
} else if (lang === 'de') {
  songTitle = song.title_de || song.title;
  songText = song.text_de || song.text;
  showOriginal = true;
}
---

<html lang="ta">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" href="/favicon.svg" type="image/svg+xml">
    <link rel="apple-touch-icon" href="/pwa-192x192.png">
    <link rel="mask-icon" href="/favicon.svg" color="#FFFFFF">
    <meta name="msapplication-TileColor" content="#FFFFFF">
    <meta name="theme-color" content="#ffffff">
    <title>{title}</title>
    <meta name="description" content={title}>
    <script src="/src/pwa.ts"></script>
    { pwaInfo && <Fragment set:html={pwaInfo.webManifest.linkTag} /> }

    <!-- Material Icons -->
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">

    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link
      href="https://fonts.googleapis.com/css2?family=Noto+Sans+Tamil:wght@100..900&display=swap"
      rel="stylesheet"
    >
  </head>
  <body class="bg-gradient-to-b from-indigo-50 to-white min-h-screen dark:from-gray-900 dark:to-gray-800 dark:text-gray-200">
    <div class="max-w-3xl mx-auto px-4 py-8">
      <!-- Header with back button and language selector -->
      <div class="flex justify-between items-center mb-6">
        <a href="/" id="back-button" class="flex items-center text-indigo-600 hover:text-indigo-800 dark:text-indigo-400 dark:hover:text-indigo-300 transition-colors group">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1 group-hover:-translate-x-1 transition-transform" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
          </svg>
          <span class="font-medium">Home</span>
        </a>
        
        <div class="relative">
          <div class="flex items-center gap-2 bg-white dark:bg-gray-800 rounded-full px-4 py-2 shadow-sm border border-indigo-100 dark:border-gray-700">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-indigo-600 dark:text-indigo-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5h12M9 3v2m1.048 9.5A18.022 18.022 0 016.412 9m6.088 9h7M11 21l5-10 5 10M12.751 5C11.783 10.77 8.07 15.61 3 18.129" />
            </svg>
            <select 
              id="language-select" 
              class="bg-transparent border-none text-gray-700 dark:text-gray-200 font-medium focus:outline-none cursor-pointer appearance-none w-20"
            >
              <option value="ta" selected={lang === 'ta'}>Tamil</option>
              <option value="en" selected={lang === 'en'}>English</option>
              <option value="de" selected={lang === 'de'}>German</option>
            </select>
            <div class="pointer-events-none absolute right-4 top-1/2 -translate-y-1/2">
              <svg class="h-4 w-4 text-gray-500 dark:text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
              </svg>
            </div>
          </div>
        </div>
      </div>

      <!-- Main Content Card -->
      <div class="bg-white rounded-xl shadow-lg overflow-hidden mb-8 transition-all hover:shadow-xl">
        <!-- Song Title -->
        <div class="bg-indigo-600 py-6 px-6 sm:px-8">
          <div class="flex items-center gap-3">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-indigo-100" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19V6l12-3v13M9 19c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zm12-3c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zM9 10l12-3" />
            </svg>
            <h1 class="text-2xl sm:text-3xl font-bold text-white">{songTitle}</h1>
          </div>
        </div>
        
        <!-- Song Content -->
        <div class="p-6 sm:p-8">
          <!-- Song Text -->
          <pre class="whitespace-pre-line text-gray-700 font-sans p-6 bg-indigo-50 rounded-lg border border-indigo-100 leading-relaxed">
            {songText}
          </pre>
          
          <!-- Original Tamil -->
          {showOriginal && (
            <div class="mt-8 pt-6 border-t border-gray-200">
              <div class="flex items-center mb-3">
                <h3 class="text-lg font-semibold text-indigo-800">Original (Tamil)</h3>
              </div>
              <h4 class="text-lg font-medium mb-3 text-gray-700">{song.title}</h4>
              <pre class="whitespace-pre-line text-gray-700 font-sans p-6 bg-indigo-50 rounded-lg border border-indigo-100 leading-relaxed">
                {song.text}
              </pre>
            </div>
          )}
          
          <!-- Audio Player -->
          <div class="mt-8 pt-6 border-t border-gray-200">
            <div class="flex items-center mb-4">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-indigo-600 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z" />
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
              <h3 class="text-lg font-semibold text-indigo-800">Listen to the Song</h3>
            </div>
            <div class="bg-indigo-50 p-4 rounded-lg border border-indigo-100">
              <audio controls class="w-full focus:outline-none">
                <source src={audioUrl} type="audio/mpeg">
                Your browser does not support the audio element.
              </audio>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Footer -->
      <footer class="text-center text-gray-500 text-sm mt-8">
        <p>Â© 2025 Songbook</p>
      </footer>
    </div>

    <script>
// Handle language switching
document.getElementById('language-select').addEventListener('change', (e) => {
  const selectedLang = e.target.value;
  const currentPath = window.location.pathname;
  const pathParts = currentPath.split('/');
  
  // Extract the song ID - it should be the last part of the URL
  const songId = pathParts[pathParts.length - 1];
  
  // Save language preference
  sessionStorage.setItem('selectedLanguage', selectedLang);
  
  // Get base path from environment or construct from current URL
  let basePath = '/songbook';
  
  // Check if we're already at a URL with the format /songs/{lang}/{id}
  // If so, we just need to replace the language part
  if (pathParts.includes('songs')) {
    // Find where 'songs' is in the path
    const songsIndex = pathParts.indexOf('songs');
    if (songsIndex >= 0 && songsIndex + 2 < pathParts.length) {
      // Construct the new URL with the same base path but different language
      let newPath = pathParts.slice(0, songsIndex + 1); // Get path up to /songs
      newPath.push(selectedLang); // Add new language
      newPath.push(songId); // Add song ID
      window.location.href = newPath.join('/');
      return;
    }
  }
  
  // Fallback: construct the full path manually
  // Remove any trailing slash from basePath
  const basePathNormalized = basePath.endsWith('/') ? basePath.slice(0, -1) : basePath;
  
  // Ensure the song ID is included in the new URL
  window.location.href = `${basePathNormalized}/songs/${selectedLang}/${songId}`;
});

// Back button functionality to save scroll position
document.getElementById('back-button').addEventListener('click', (e) => {
  e.preventDefault();
  
  // Get the current song ID to use as a key for the scroll position
  const pathParts = window.location.pathname.split('/');
  const songId = pathParts[pathParts.length - 1];
  
  // Store that we're navigating back from this specific song
  sessionStorage.setItem('returnedFromSong', songId);
  
  // Navigate to songbook page
  window.location.href = '/songbook';
});

// Search term highlighting functionality
function highlightSearchTerm() {
  // Get search query from URL parameters or sessionStorage
  const urlParams = new URLSearchParams(window.location.search);
  const searchQuery = urlParams.get('q') || sessionStorage.getItem('searchQuery');
  
  if (!searchQuery || searchQuery.trim() === '') return;
  
  // Function to highlight matches in text
  function highlightMatches(element, searchTerm) {
    if (!element || !searchTerm || searchTerm.trim() === '') return;
    
    const text = element.innerHTML;
    const regex = new RegExp(`(${searchTerm.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&')})`, 'gi');
    
    // Only process if there's a match
    if (regex.test(text)) {
      element.innerHTML = text.replace(regex, '<mark class="bg-yellow-200 text-gray-800">$1</mark>');
    }
  }
  
  // Highlight matches in song title
  const titleElement = document.querySelector('h1');
  highlightMatches(titleElement, searchQuery);
  
  // Highlight matches in song text
  const textElements = document.querySelectorAll('pre');
  textElements.forEach(element => {
    highlightMatches(element, searchQuery);
  });
  
  // Add a search badge at the top if matches were found
  const songContent = document.querySelector('.p-6.sm\\:p-8');
  if (songContent) {
    // Check if any highlights were added
    const highlights = document.querySelectorAll('mark.bg-yellow-200');
    
    if (highlights.length > 0) {
      // Create the search badge
      const searchBadge = document.createElement('div');
      searchBadge.className = 'mb-4 flex items-center gap-2 text-sm bg-indigo-100 text-indigo-800 px-3 py-2 rounded-lg';
      searchBadge.innerHTML = `
        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
        </svg>
        <span>Showing ${highlights.length} matches for "${searchQuery}"</span>
        <button id="clearHighlights" class="ml-auto text-indigo-600 hover:text-indigo-800">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      `;
      
      // Insert at the beginning of the content
      songContent.insertBefore(searchBadge, songContent.firstChild);
      
      // Add clear highlights functionality
      document.getElementById('clearHighlights').addEventListener('click', () => {
        // Remove all highlights
        document.querySelectorAll('mark.bg-yellow-200').forEach(mark => {
          const parent = mark.parentNode;
          const text = mark.textContent;
          const textNode = document.createTextNode(text);
          parent.replaceChild(textNode, mark);
        });
        
        // Remove the search badge
        searchBadge.remove();
      });
      
      // Add keyboard navigation between highlights
      let currentHighlightIndex = -1;
      
      function navigateHighlights(direction) {
        const highlights = document.querySelectorAll('mark.bg-yellow-200');
        if (highlights.length === 0) return;
        
        // Remove current highlight
        if (currentHighlightIndex >= 0 && currentHighlightIndex < highlights.length) {
          highlights[currentHighlightIndex].classList.remove('ring', 'ring-indigo-500');
        }
        
        // Update index
        currentHighlightIndex += direction;
        if (currentHighlightIndex >= highlights.length) currentHighlightIndex = 0;
        if (currentHighlightIndex < 0) currentHighlightIndex = highlights.length - 1;
        
        // Highlight current and scroll to it
        const currentHighlight = highlights[currentHighlightIndex];
        currentHighlight.classList.add('ring', 'ring-indigo-500');
        currentHighlight.scrollIntoView({ behavior: 'smooth', block: 'center' });
        
        // Update the counter in search badge
        const counter = document.querySelector('#highlightCounter');
        if (counter) {
          counter.textContent = `${currentHighlightIndex + 1}/${highlights.length}`;
        } else {
          const counterSpan = document.createElement('span');
          counterSpan.id = 'highlightCounter';
          counterSpan.className = 'ml-2 bg-indigo-200 text-indigo-800 px-2 py-0.5 rounded-full text-xs';
          counterSpan.textContent = `${currentHighlightIndex + 1}/${highlights.length}`;
          searchBadge.querySelector('span').appendChild(counterSpan);
        }
      }
      
      // Add navigation buttons to search badge
      const navButtons = document.createElement('div');
      navButtons.className = 'flex items-center gap-1 ml-2';
      navButtons.innerHTML = `
        <button id="prevHighlight" class="p-1 rounded-full hover:bg-indigo-200" title="Previous match">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
          </svg>
        </button>
        <button id="nextHighlight" class="p-1 rounded-full hover:bg-indigo-200" title="Next match">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
          </svg>
        </button>
      `;
      
      searchBadge.insertBefore(navButtons, document.getElementById('clearHighlights'));
      
      document.getElementById('prevHighlight').addEventListener('click', () => navigateHighlights(-1));
      document.getElementById('nextHighlight').addEventListener('click', () => navigateHighlights(1));
      
      // Start with the first highlight
      navigateHighlights(1);
      
      // Keyboard shortcuts for navigation
      document.addEventListener('keydown', (e) => {
        if (e.key === 'F3' || (e.ctrlKey && e.key === 'g')) {
          e.preventDefault();
          navigateHighlights(1);
        } else if (e.shiftKey && e.key === 'F3' || (e.ctrlKey && e.shiftKey && e.key === 'g')) {
          e.preventDefault();
          navigateHighlights(-1);
        }
      });
    }
  }
}

// Run the highlight function when the page is loaded
document.addEventListener('DOMContentLoaded', highlightSearchTerm);

// Persist search query when navigating between songs
function updateSearchParamOnLinks() {
  const urlParams = new URLSearchParams(window.location.search);
  const searchQuery = urlParams.get('q') || sessionStorage.getItem('searchQuery');
  
  if (searchQuery) {
    // Update links to other songs to include the search parameter
    document.querySelectorAll('a[href^="/songs/"]').forEach(link => {
      const url = new URL(link.href, window.location.origin);
      url.searchParams.set('q', searchQuery);
      link.href = url.pathname + url.search;
    });
  }
}

// Run this function as well
document.addEventListener('DOMContentLoaded', updateSearchParamOnLinks);


// State management enhancement
const state = {
  // Update clear button visibility based on search input
  updateClearButtonVisibility() {
    if (searchInput.value.length > 0) {
      clearButton.classList.remove('hidden');
    } else {
      clearButton.classList.add('hidden');
    }
  },

  // Save current state to localStorage (more persistent than sessionStorage)
  saveState() {
    localStorage.setItem('scrollPosition', window.pageYOffset);
    localStorage.setItem('searchQuery', searchInput.value);
    localStorage.setItem('selectedLang', langSelect.value);
    localStorage.setItem('returnedFromSong', 'true');
    // Store timestamp to allow for state expiration if needed
    localStorage.setItem('stateTimestamp', Date.now());
  },

  // Restore state from localStorage
  restoreState() {
    const returnedFromSong = localStorage.getItem('returnedFromSong');
    
    if (returnedFromSong) {
      // Restore search query
      const savedQuery = localStorage.getItem('searchQuery');
      if (savedQuery) {
        searchInput.value = savedQuery;
        this.updateClearButtonVisibility();
      }
      
      // Restore language selection
      const savedLang = localStorage.getItem('selectedLang');
      if (savedLang && savedLang !== langSelect.value) {
        langSelect.value = savedLang;
        updateSongDisplay();
      }
      
      // Apply the filter to show only matching results
      // This must be called after restoring search query and language
      if (savedQuery && savedQuery.trim() !== '') {
        filterSongs();
        
        // Make sure text matches are shown
        setTimeout(() => {
          songItems.forEach(item => {
            const searchTerm = savedQuery.toLowerCase().trim();
            let textField;
            
            // Get the appropriate field based on language
            if (langSelect.value === 'ta') {
              textField = 'text';
            } else if (langSelect.value === 'en') {
              textField = 'textEn';
            } else if (langSelect.value === 'de') {
              textField = 'textDe';
            }
            
            // Check if this item has a text match
            const text = item.dataset[textField] ? 
              item.dataset[textField].toLowerCase() : 
              item.dataset.text.toLowerCase();
            
            // If there's a text match, show the context
            if (text.includes(searchTerm)) {
              const matchContext = item.querySelector('.match-context');
              if (matchContext) {
                const rawText = item.dataset[textField] || item.dataset.text || '';
                const context = findMatchContext(rawText, searchTerm);
                const contextTextEl = matchContext.querySelector('p');
                if (contextTextEl) {
                  contextTextEl.innerHTML = highlightMatches(context, searchTerm);
                  matchContext.classList.remove('hidden');
                }
              }
            }
          });
        }, 50);
      }
      
      // Restore scroll position
      const savedPosition = localStorage.getItem('scrollPosition');
      if (savedPosition) {
        // Use setTimeout to ensure the scroll happens after the DOM is fully updated
        setTimeout(() => {
          window.scrollTo(0, parseInt(savedPosition));
        }, 100);
      }
    }
  },

  // Don't clear state when restoring, to preserve across home button clicks
  clearState() {
    // Only clear the returnedFromSong flag
    localStorage.removeItem('returnedFromSong');
    // Keep other state items preserved
  }
};

// Enhance setupEventListeners to handle home button navigation
function setupEventListeners() {
  // Existing event listeners...

  // Save state when navigating to a song
  document.querySelectorAll('.song-item a').forEach(link => {
    link.addEventListener('click', function(e) {
      state.saveState();
    });
  });
  
  // Home button or header logo click handler
  const homeLinks = document.querySelectorAll('a[href="/"], a[href="./index.html"], .header-logo a, a.home-link');
  homeLinks.forEach(link => {
    link.addEventListener('click', function(e) {
      // Mark as returning to preserve the state
      localStorage.setItem('returnedFromSong', 'true');
    });
  });
  
  // Detect browser back/forward navigation
  window.addEventListener('popstate', function() {
    // Mark as returning to handle browser back button
    localStorage.setItem('returnedFromSong', 'true');
    // Allow a small delay for the DOM to update
    setTimeout(() => {
      state.restoreState();
    }, 50);
  });
  
  // Save scroll position periodically while viewing song list
  let scrollTimer;
  window.addEventListener('scroll', function() {
    clearTimeout(scrollTimer);
    scrollTimer = setTimeout(() => {
      if (window.location.pathname === '/' || 
          window.location.pathname.endsWith('index.html') ||
          window.location.pathname === '') {
        localStorage.setItem('scrollPosition', window.pageYOffset);
      }
    }, 200);
  });
}

// Initialize with additional checks for URL parameters
function init() {
  // Set up all event listeners
  setupEventListeners();
  
  // Check URL parameters for search terms (useful for deep linking)
  const urlParams = new URLSearchParams(window.location.search);
  const urlSearchTerm = urlParams.get('search');
  const urlLang = urlParams.get('lang');
  
  // Apply URL parameters if present
  if (urlLang && ['ta', 'en', 'de'].includes(urlLang)) {
    langSelect.value = urlLang;
  }
  
  if (urlSearchTerm) {
    searchInput.value = urlSearchTerm;
    // Set flag to preserve this search
    localStorage.setItem('searchQuery', urlSearchTerm);
  }
  
  // Initialize song display
  updateSongDisplay();
  
  // Restore state if returning from a song
  state.restoreState();
  
  // Update clear button visibility (handles page reload cases)
  state.updateClearButtonVisibility();
  
  // If we have a search term from URL or localStorage, apply filtering
  if (searchInput.value.trim() !== '') {
    filterSongs();
  }
  
  // Hide all text snippets at startup
  document.querySelectorAll('.song-item .relative').forEach(snippet => {
    snippet.classList.add('hidden');
  });
}

// Run initialization when DOM is loaded
document.addEventListener('DOMContentLoaded', init);
    </script>
  </body>
</html>
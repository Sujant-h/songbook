---
import songs from '../data/data_cleaned.json';
import '../styles/global.css';
import '../styles/index.css';
import { pwaInfo } from 'virtual:pwa-info';

export interface Props {
	title: string;
}

const { title } = Astro.props as Props;



---
<html lang="ta">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" href="/favicon.svg" type="image/svg+xml">
    <link rel="apple-touch-icon" href="/pwa-192x192.png">
    <link rel="mask-icon" href="/favicon.svg" color="#FFFFFF">
    <meta name="msapplication-TileColor" content="#FFFFFF">
    <meta name="theme-color" content="#ffffff">
    <title>{title}</title>
    <meta name="description" content={title}>
    <script src="/src/pwa.ts"></script>
    { pwaInfo && <Fragment set:html={pwaInfo.webManifest.linkTag} /> }
    <link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Noto+Sans+Tamil:wght@100..900&display=swap" rel="stylesheet">

  <!-- Other head elements -->
  </head>
  <body class="bg-gray-100 font-tamil">
    <div class="w-full px-4 py-8 sm:container sm:mx-auto">
      <h1 class="text-3xl md:text-4xl font-extrabold text-center text-darkblue mb-8 leading-snug">
        Tamil Christian Songs
      </h1>

      <!-- Improved Search Bar -->
      <div class="search-bar relative mb-8">
        <span class="search-icon">
          <!-- Inline SVG for search icon -->
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none"
               viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
              d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
          </svg>
        </span>
        <input
          id="searchInput"
          type="text"
          placeholder="Search songs..."
          class="w-full pl-10 px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-babyblue"
        />
        <button
          id="clearButton"
          type="button"
          class="absolute right-2 top-1/2 transform -translate-y-1/2 text-gray-500 hidden focus:outline-none"
          aria-label="Clear search"
        >
          âœ•
        </button>
      </div>

      <!-- Songs List -->
      <ul class="grid grid-cols-1 gap-4 sm:grid-cols-2 lg:grid-cols-3 font-tamil" id="songsList">
        {songs.map((song, index) => (
<li key={song.id} data-index={index} data-title={song.title} data-text={song.text} class="song-item w-full bg-white rounded-lg shadow hover:shadow-lg transition-shadow">
  <a href={`${import.meta.env.BASE_URL}/songs/${song.id}`} class="block h-full p-4 sm:p-6">
    <div class="title-hit text-base md:text-lg lg:text-xl font-medium text-gray-800 hover:text-deapseablue transition-colors">
      {song.title}
    </div>
    <div class="text-hit text-sm text-gray-600"></div>
  </a>
</li>

        ))}
      </ul>
    </div>

    <!-- Go to Top Button -->
<button id="goToTopButton" 
        class="fixed bottom-4 right-4 bg-babyblue text-white rounded-full shadow-lg p-3 hover:bg-wallpaintblue focus:outline-none flex items-center justify-center hidden">
  <span class="hidden sm:flex items-center justify-center">
    <!-- Desktop version: text + icon -->
    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none"
         viewBox="0 0 24 24" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M5 10l7-7m0 0l7 7m-7-7v18" />
    </svg>
    <span class="ml-2">Go to Top</span>
  </span>
  <span class="sm:hidden flex items-center justify-center">
    <!-- Mobile version: only arrow icon -->
    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none"
         viewBox="0 0 24 24" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M5 10l7-7m0 0l7 7m-7-7v18" />
    </svg>
  </span>
</button>


    <!-- Optimized Client-Side Script -->
    <script>
      // Utility functions
      const escapeRegExp = str => str.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
      const cleanText = text => text.replace(/(\\n|\r\n|\n|\r)/g, ' ').replace(/\s+/g, ' ').trim();
      const highlight = (text, query) => {
        if (!query) return text;
        text = cleanText(text);
        const words = query.split(/\s+/).filter(Boolean);
        const regex = new RegExp('(' + words.map(escapeRegExp).join('|') + ')', 'giu');
        return text.replace(regex, '<span class="highlighted">$1</span>');
      };
      const getSnippet = (text, query, snippetLength = 50) => {
        if (!query) return '';
        const cleaned = cleanText(text);
        const lowerText = cleaned.toLowerCase();
        const queryWords = query.split(/\s+/).filter(Boolean);
        let firstIndex = Infinity;
        queryWords.forEach(word => {
          const i = lowerText.indexOf(word.toLowerCase());
          if (i !== -1 && i < firstIndex) firstIndex = i;
        });
        if (firstIndex === Infinity) return '';
        let start = Math.max(0, firstIndex - snippetLength);
        let end = Math.min(cleaned.length, firstIndex + snippetLength + queryWords[0].length);
        if (start > 0) {
          const prevSpace = cleaned.lastIndexOf(' ', start);
          if (prevSpace !== -1) start = prevSpace + 1;
        }
        if (end < cleaned.length) {
          const nextSpace = cleaned.indexOf(' ', end);
          if (nextSpace !== -1) end = nextSpace;
        }
        let snippet = cleaned.substring(start, end);
        if (start > 0) snippet = '...' + snippet;
        if (end < cleaned.length) snippet = snippet + '...';
        return highlight(snippet, query);
      };

      // Debounce helper to optimize search filtering
      const debounce = (fn, delay) => {
        let timeout;
        return (...args) => {
          clearTimeout(timeout);
          timeout = setTimeout(() => fn(...args), delay);
        };
      };

      // DOM elements
      const searchInput = document.getElementById('searchInput');
      const clearButton = document.getElementById('clearButton');
      const songsList = document.getElementById('songsList');
      const songItems = Array.from(document.querySelectorAll('.song-item'));

      // Restore original order and clear highlights/snippets
      const resetOriginalOrder = () => {
        songItems.sort((a, b) =>
          Number(a.getAttribute('data-index')) - Number(b.getAttribute('data-index'))
        );
        songsList.innerHTML = '';
        songItems.forEach(item => {
          const originalTitle = cleanText(item.getAttribute('data-title'));
          item.querySelector('.title-hit').innerHTML = originalTitle;
          item.querySelector('.text-hit').innerHTML = '';
          item.style.display = '';
          songsList.appendChild(item);
        });
      };

      // Filter songs based on query
      const filterSongs = query => {
        query = query.trim();
        if (query === '') {
          resetOriginalOrder();
          return;
        }
        const queryWords = query.split(/\s+/).filter(Boolean);
        const isQueryNumeric = /^\d+$/.test(query);
        let titleMatches = [];
        let textMatches = [];
        songItems.forEach(li => {
          const originalTitle = li.getAttribute('data-title');
          const originalText = li.getAttribute('data-text');
          const cleanedTitle = cleanText(originalTitle);
          const cleanedText = cleanText(originalText);
          const lowerTitle = cleanedTitle.toLowerCase();
          const lowerText = cleanedText.toLowerCase();
          const matchInTitle = queryWords.every(word =>
            lowerTitle.includes(word.toLowerCase())
          );
          const matchInText = isQueryNumeric
            ? false
            : queryWords.every(word =>
                lowerText.includes(word.toLowerCase())
              );
          if (!matchInTitle && !matchInText) {
            li.style.display = 'none';
            return;
          }
          li.style.display = '';
          if (matchInTitle) {
            li.querySelector('.title-hit').innerHTML = highlight(cleanedTitle, query);
            li.querySelector('.text-hit').innerHTML = '';
            titleMatches.push(li);
          } else if (matchInText) {
            li.querySelector('.title-hit').innerHTML = cleanedTitle;
            li.querySelector('.text-hit').innerHTML = getSnippet(originalText, query, 50);
            textMatches.push(li);
          }
        });
        // Show title matches first, then text matches
        const sortedMatches = titleMatches.concat(textMatches);
        songsList.innerHTML = '';
        sortedMatches.forEach(li => songsList.appendChild(li));
      };

      // Debounced filtering on input
      const debouncedFilter = debounce(() => {
        const query = searchInput.value;
        sessionStorage.setItem('searchQuery', query);
        filterSongs(query);
        clearButton.style.display = query.trim() !== '' ? 'block' : 'none';
      }, 300);

      // Restore saved query if any
      const savedQuery = sessionStorage.getItem('searchQuery');
      if (savedQuery) {
        searchInput.value = savedQuery;
        filterSongs(savedQuery);
        if (savedQuery.trim() !== '') clearButton.style.display = 'block';
      }

      searchInput.addEventListener('input', debouncedFilter);
      clearButton.addEventListener('click', () => {
        searchInput.value = '';
        sessionStorage.removeItem('searchQuery');
        resetOriginalOrder();
        clearButton.style.display = 'none';
      });

            // Go to Top Button functionality
      const goToTopButton = document.getElementById('goToTopButton');
      window.addEventListener('scroll', () => {
        if (window.scrollY > 300) {
          goToTopButton.style.display = 'block';
        } else {
          goToTopButton.style.display = 'none';
        }
      });
      goToTopButton.addEventListener('click', () => {
        window.scrollTo({ top: 0, behavior: 'smooth' });
      });
    </script>
    <!-- At the end of your body -->

</script>
  </body>
</html>
